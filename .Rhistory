knitr::opts_chunk$set(echo = TRUE)
paper_orders <- read.table("20151202input.txt")
View(paper_orders)
library("tidyverse")
View(paper_orders)
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
View(paper_orders)
?min
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
mutate(smallest_side = prod(sort(c(length, width, height))[1:2]))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
mutate(smallest_side =
min(c(length, width, height))*median(c(length, width, height)))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
mutate(smallest_side =
min(c(length, width, height)))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
mutate(smallest_side =
min(length, width, height))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_side =
min(length, width, height)*median(length, width, height))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_side =
min(length, width, height))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(length, width, height),
median_dim = median(length, width, height))
median_dim = median(c(length, width, height))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(length, width, height),
median_dim = median(c(length, width, height)))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
# mutate(smallest_dim = min(length, width, height),
#        median_dim = median(c(length, width, height)))
mutate(smallest_side =
min(length, width, height)*median(c(length, width, height)))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(length, width, height),
median_dim = median(c(length, width, height)))
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(length, width, height),
median_dim = median(c(length, width, height)))
# mutate(smallest_side = min(length, width, height),
#          median_dim = median(c(length, width, height)))
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(c(length, width, height)),
median_dim = median(c(length, width, height)))
# mutate(smallest_side = min(length, width, height),
#          median_dim = median(c(length, width, height)))
?c_across
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(c_across(length, width, height)),
median_dim = median(c_across(length, width, height)))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(c_across(length:height)),
median_dim = median(c_across(length:height)))
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE) %>%
#find smallest side
rowwise() %>%
mutate(smallest_dim = min(c_across(length:height)),
median_dim = median(c_across(length:height)))
# mutate(smallest_side = min(length, width, height),
#          median_dim = median(c(length, width, height)))
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
str(paper_orders)
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
paper_orders$length <- as.numeric(paper_orders$length)
paper_orders$width <- as.numeric(paper_orders$width)
paper_orders$height <- as.numeric(paper_orders$height)
#find smallest side
paper_orders <- paper_orders %>%
rowwise() %>%
mutate(smallest_dim = min(c_across(length:height)),
median_dim = median(c_across(length:height)))
# mutate(smallest_side = min(length, width, height),
#          median_dim = median(c(length, width, height)))
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
paper_orders$length <- as.numeric(paper_orders$length)
paper_orders$width <- as.numeric(paper_orders$width)
paper_orders$height <- as.numeric(paper_orders$height)
#find smallest side
paper_orders <- paper_orders %>%
rowwise() %>%
# mutate(smallest_dim = min(c_across(length:height)),
#        median_dim = median(c_across(length:height)))
mutate(smallest_side =
min(c_across(length:height))*median(c_across(length:height)))
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
paper_orders$length <- as.numeric(paper_orders$length)
paper_orders$width <- as.numeric(paper_orders$width)
paper_orders$height <- as.numeric(paper_orders$height)
#find smallest side
paper_orders <- paper_orders %>%
rowwise() %>%
# mutate(smallest_dim = min(c_across(length:height)),
#        median_dim = median(c_across(length:height)))
mutate(smallest_side =
min(c_across(length:height))*median(c_across(length:height)))
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
paper_orders$length <- as.numeric(paper_orders$length)
paper_orders$width <- as.numeric(paper_orders$width)
paper_orders$height <- as.numeric(paper_orders$height)
#find smallest side
paper_orders <- paper_orders %>%
rowwise() %>%
# mutate(smallest_dim = min(c_across(length:height)),
#        median_dim = median(c_across(length:height)))
mutate(smallest_side =
min(c_across(length:height))*median(c_across(length:height)))
# compute area needed per package
paper_orders <- paper_orders %>%
mutate(wrapping_area = 2*length + 2*width + 2*height - smallest_side)
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
paper_orders$length <- as.numeric(paper_orders$length)
paper_orders$width <- as.numeric(paper_orders$width)
paper_orders$height <- as.numeric(paper_orders$height)
#find smallest side
paper_orders <- paper_orders %>%
rowwise() %>%
# mutate(smallest_dim = min(c_across(length:height)),
#        median_dim = median(c_across(length:height)))
mutate(smallest_side =
min(c_across(length:height))*median(c_across(length:height)))
# compute area needed per package
paper_orders <- paper_orders %>%
mutate(wrapping_area = 2*length*width + 2*width*height +
2*length*height - smallest_side)
print(sum(paper_orders$wrapping_area))
paper_orders <- read.table("20151202input.txt")
colnames(paper_orders) <- "specs"
# parse length, width, and height
paper_orders <- paper_orders %>%
separate(specs,
into = c("length", "width", "height"),
sep = "x",
remove = FALSE)
paper_orders$length <- as.numeric(paper_orders$length)
paper_orders$width <- as.numeric(paper_orders$width)
paper_orders$height <- as.numeric(paper_orders$height)
#find smallest side
paper_orders <- paper_orders %>%
rowwise() %>%
# mutate(smallest_dim = min(c_across(length:height)),
#        median_dim = median(c_across(length:height)))
mutate(smallest_side =
min(c_across(length:height))*median(c_across(length:height)))
# compute area needed per package
paper_orders <- paper_orders %>%
mutate(wrapping_area = 2*length*width + 2*width*height +
2*length*height + smallest_side)
print(sum(paper_orders$wrapping_area))
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
# practice parsing
input_example <- "toggle 0,0 through 999,0"
# load data
santas_list_raw <- read.table("20151206input.txt")
# load data
santas_list_raw <- readLines("20151206input.txt")
santas_list_raw[1:3]
library("tidyverse")
str_split(input_example, ",")
str_split(input_example, ",")[[1]]
input_pieces <- str_split(input_example, ",")[[1]]
a1 <- str_extract(input_pieces[1], "\\d+$")
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$"))
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$"))
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+"))
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+"))
# practice parsing
input_example <- "turn off 6,964 through 411,976"
input_pieces <- str_split(input_example, ",")[[1]]
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$"))
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$"))
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+"))
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+"))
instruction <- str_sub(input_pieces[1], 1, 7)
# form matrix
light_matrix <- matrix(rep(0, 1e6), nrow = 1000, ncol = 1000)
# main loop
for(k in 1:10){
# for(k in 1:length(santas_list_raw)){
this_task <- santas_list_raw[k]
input_pieces <- str_split(input_example, ",")[[1]]
# add one (R counts from 1, not zero)
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$")) + 1
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$")) + 1
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+")) + 1
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+")) + 1
instruction <- str_sub(input_pieces[1], 1, 7)
if(instruction == "turn on"){
for(i in a1:a2){
for(j in b1:b2){
M[i,j] = 1
}
}
}
}
sum(M)
# main loop
for(k in 1:10){
# for(k in 1:length(santas_list_raw)){
this_task <- santas_list_raw[k]
input_pieces <- str_split(input_example, ",")[[1]]
# add one (R counts from 1, not zero)
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$")) + 1
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$")) + 1
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+")) + 1
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+")) + 1
instruction <- str_sub(input_pieces[1], 1, 7)
if(instruction == "turn on"){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] = 1
}
}
}
}
sum(light_matrix)
# main loop
for(k in 1:10){
# for(k in 1:length(santas_list_raw)){
this_task <- santas_list_raw[k]
input_pieces <- str_split(input_example, ",")[[1]]
# add one (R counts from 1, not zero)
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$")) + 1
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$")) + 1
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+")) + 1
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+")) + 1
instruction <- str_sub(input_pieces[1], 1, 7)
if(instruction == "turn on"){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- 1
}
}
}
}
sum(light_matrix)
this_task <- santas_list_raw[1]
# main loop
for(k in 1:10){
# for(k in 1:length(santas_list_raw)){
this_task <- santas_list_raw[k]
input_pieces <- str_split(this_task, ",")[[1]]
# add one (R counts from 1, not zero)
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$")) + 1
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$")) + 1
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+")) + 1
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+")) + 1
instruction <- str_sub(input_pieces[1], 1, 7)
if(instruction == "turn on"){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- 1
}
}
}
}
sum(light_matrix)
0 + 1 %% 2
1 + 1 %% 2
(1 + 1) %% 2
# main loop
for(k in 1:10){
# for(k in 1:length(santas_list_raw)){
this_task <- santas_list_raw[k]
input_pieces <- str_split(this_task, ",")[[1]]
# add one (R counts from 1, not zero)
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$")) + 1
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$")) + 1
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+")) + 1
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+")) + 1
instruction <- str_sub(input_pieces[1], 1, 7)
if(instruction == "turn on"){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- 1
}
}
}
if(instruction == "turn of"){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- 0
}
}
}
if(instruction == "toggle "){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- (light_matrix[i,j] + 1) %% 2
}
}
}
}
sum(light_matrix)
# main loop
# for(k in 1:10){
for(k in 1:length(santas_list_raw)){
this_task <- santas_list_raw[k]
input_pieces <- str_split(this_task, ",")[[1]]
# add one (R counts from 1, not zero)
a1 <- as.numeric(str_extract(input_pieces[1], "\\d+$")) + 1
a2 <- as.numeric(str_extract(input_pieces[2], "\\d+$")) + 1
b1 <- as.numeric(str_extract(input_pieces[2], "^\\d+")) + 1
b2 <- as.numeric(str_extract(input_pieces[3], "^\\d+")) + 1
instruction <- str_sub(input_pieces[1], 1, 7)
if(instruction == "turn on"){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- 1
}
}
}
if(instruction == "turn of"){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- 0
}
}
}
if(instruction == "toggle "){
for(i in a1:a2){
for(j in b1:b2){
light_matrix[i,j] <- (light_matrix[i,j] + 1) %% 2
}
}
}
}
sum(light_matrix)
