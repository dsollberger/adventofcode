}
}
}
print("The fewest steps required to move starting from any square")
print("with elevation a to the location that should get ")
print("the best signal is")
print(min_step_count)
min_step_count <- 9999
this_step_count <- 9999
for(row in 2:(M-1)){
for(col in 2:(N-1)){
# check to see if we are at "a" (or "S") elevation
if(topo_mat[row,col] == 1){
# see if "b" is a neighbor!!
if(topo_mat[row-1,col] == 2 ||
topo_mat[row+1,col] == 2 ||
topo_mat[row,col-1] == 2 ||
topo_mat[row,col+1] == 2){
# run maze solver
for(k in 1:(M*N)){
for(i in 1:M){
for(j in 1:N){
# if space has been explored, proceed to search neighbors
if(puzzle_mat[i,j] >= 0){
# look north
if(i != 1 && puzzle_mat[i-1,j] < 0){
if(topo_mat[i-1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i-1,j] <- puzzle_mat[i,j] + 1
}
}
# look east
if(j != N && puzzle_mat[i,j+1] < 0){
if(topo_mat[i,j+1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j+1] <- puzzle_mat[i,j] + 1
}
}
# look south
if(i != M && puzzle_mat[i+1,j] < 0){
if(topo_mat[i+1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i+1,j] <- puzzle_mat[i,j] + 1
}
}
# look west
if(j != 1 && puzzle_mat[i,j-1] < 0){
if(topo_mat[i,j-1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j-1] <- puzzle_mat[i,j] + 1
}
}
}
}
}
if(puzzle_mat[E_x, E_y] > 0){
break
}
}
this_step_count <- puzzle_mat[E_x, E_y]
if(this_step_count < min_step_count){
min_step_count <- this_step_count
}
}
}
}
}
print("The fewest steps required to move starting from any square")
print("with elevation a to the location that should get ")
print("the best signal is")
print(min_step_count)
min_step_count <- 9999
this_step_count <- 9999
for(row in 1:M){
for(col in 1:N){
# check to see if we are at "a" (or "S") elevation
if(topo_mat[row,col] == 1){
# see if "b" is a neighbor!!
can_start_climb <- FALSE
if(row != 1 && topo_mat[row-1,col] == 2){can_start_climb <- TRUE}
if(row != M && topo_mat[row+1,col] == 2){can_start_climb <- TRUE}
if(col != 1 && topo_mat[row,col-1] == 2){can_start_climb <- TRUE}
if(row != N && topo_mat[row,col+1] == 2){can_start_climb <- TRUE}
if(can_start_climb){
# run maze solver
for(k in 1:(M*N)){
for(i in 1:M){
for(j in 1:N){
# if space has been explored, proceed to search neighbors
if(puzzle_mat[i,j] >= 0){
# look north
if(i != 1 && puzzle_mat[i-1,j] < 0){
if(topo_mat[i-1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i-1,j] <- puzzle_mat[i,j] + 1
}
}
# look east
if(j != N && puzzle_mat[i,j+1] < 0){
if(topo_mat[i,j+1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j+1] <- puzzle_mat[i,j] + 1
}
}
# look south
if(i != M && puzzle_mat[i+1,j] < 0){
if(topo_mat[i+1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i+1,j] <- puzzle_mat[i,j] + 1
}
}
# look west
if(j != 1 && puzzle_mat[i,j-1] < 0){
if(topo_mat[i,j-1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j-1] <- puzzle_mat[i,j] + 1
}
}
}
}
}
if(puzzle_mat[E_x, E_y] > 0){
break
}
}
this_step_count <- puzzle_mat[E_x, E_y]
if(this_step_count < min_step_count){
min_step_count <- this_step_count
}
}
}
}
}
print("The fewest steps required to move starting from any square")
print("with elevation a to the location that should get ")
print("the best signal is")
print(min_step_count)
#| message: false
#| warning: false
library("tidyverse")
# load puzzle input
puzzle_input <- readLines("../inputs/20221212input.txt")
# puzzle_input <- readLines("../inputs/20221212example.txt")
# get dimensions
M <- length(puzzle_input)
N <- nchar(puzzle_input[1])
# recreate matrix of letters
letter_mat <- matrix(rep(NA, M*N), nrow = M, ncol = N)
for(i in 1:M){
letter_mat[i,] <- str_split(puzzle_input[i], "")[[1]]
}
# make numerical version of topography
letters_to_numbers <- match(letter_mat, letters)
topo_mat <- matrix(letters_to_numbers, nrow = M, ncol = N)
topo_mat[letter_mat == "S"] <- 1
topo_mat[letter_mat == "E"] <- 26
# create a space for puzzle solving
S_x <- which(letter_mat == "S", arr.ind = TRUE)[1]
S_y <- which(letter_mat == "S", arr.ind = TRUE)[2]
E_x <- which(letter_mat == "E", arr.ind = TRUE)[1]
E_y <- which(letter_mat == "E", arr.ind = TRUE)[2]
puzzle_mat <- matrix(rep(-1, M*N), nrow = M, ncol = N)
puzzle_mat[S_x, S_y] <- 0 # starting location
min_step_count <- 9999
this_step_count <- 9999
for(row in 1:M){
for(col in 1:N){
# check to see if we are at "a" (or "S") elevation
if(topo_mat[row,col] == 1){
# see if "b" is a neighbor!!
can_start_climb <- FALSE
if(row != 1 && topo_mat[row-1,col] == 2){can_start_climb <- TRUE}
if(row != M && topo_mat[row+1,col] == 2){can_start_climb <- TRUE}
if(col != 1 && topo_mat[row,col-1] == 2){can_start_climb <- TRUE}
if(row != N && topo_mat[row,col+1] == 2){can_start_climb <- TRUE}
if(can_start_climb){
# run maze solver
for(k in 1:(M*N)){
for(i in 1:M){
for(j in 1:N){
# if space has been explored, proceed to search neighbors
if(puzzle_mat[i,j] >= 0){
# look north
if(i != 1 && puzzle_mat[i-1,j] < 0){
if(topo_mat[i-1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i-1,j] <- puzzle_mat[i,j] + 1
}
}
# look east
if(j != N && puzzle_mat[i,j+1] < 0){
if(topo_mat[i,j+1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j+1] <- puzzle_mat[i,j] + 1
}
}
# look south
if(i != M && puzzle_mat[i+1,j] < 0){
if(topo_mat[i+1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i+1,j] <- puzzle_mat[i,j] + 1
}
}
# look west
if(j != 1 && puzzle_mat[i,j-1] < 0){
if(topo_mat[i,j-1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j-1] <- puzzle_mat[i,j] + 1
}
}
}
}
}
if(puzzle_mat[E_x, E_y] > 0){
break
}
}
this_step_count <- puzzle_mat[E_x, E_y]
if(this_step_count < min_step_count){
min_step_count <- this_step_count
}
}
}
}
}
min_step_count <- 9999
this_step_count <- 9999
for(row in 1:M){
for(col in 1:N){
# check to see if we are at "a" (or "S") elevation
if(topo_mat[row,col] == 1){
# see if "b" is a neighbor!!
can_start_climb <- FALSE
if(row != 1 && topo_mat[row-1,col] == 2){can_start_climb <- TRUE}
if(row != M && topo_mat[row+1,col] == 2){can_start_climb <- TRUE}
if(col != 1 && topo_mat[row,col-1] == 2){can_start_climb <- TRUE}
if(col != N && topo_mat[row,col+1] == 2){can_start_climb <- TRUE}
if(can_start_climb){
# run maze solver
for(k in 1:(M*N)){
for(i in 1:M){
for(j in 1:N){
# if space has been explored, proceed to search neighbors
if(puzzle_mat[i,j] >= 0){
# look north
if(i != 1 && puzzle_mat[i-1,j] < 0){
if(topo_mat[i-1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i-1,j] <- puzzle_mat[i,j] + 1
}
}
# look east
if(j != N && puzzle_mat[i,j+1] < 0){
if(topo_mat[i,j+1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j+1] <- puzzle_mat[i,j] + 1
}
}
# look south
if(i != M && puzzle_mat[i+1,j] < 0){
if(topo_mat[i+1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i+1,j] <- puzzle_mat[i,j] + 1
}
}
# look west
if(j != 1 && puzzle_mat[i,j-1] < 0){
if(topo_mat[i,j-1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j-1] <- puzzle_mat[i,j] + 1
}
}
}
}
}
if(puzzle_mat[E_x, E_y] > 0){
break
}
}
this_step_count <- puzzle_mat[E_x, E_y]
if(this_step_count < min_step_count){
min_step_count <- this_step_count
}
}
}
}
}
print("The fewest steps required to move starting from any square")
print("with elevation a to the location that should get ")
print("the best signal is")
print(min_step_count)
#| message: false
#| warning: false
library("tidyverse")
# load puzzle input
# puzzle_input <- readLines("../inputs/20221212input.txt")
puzzle_input <- readLines("../inputs/20221212example.txt")
# get dimensions
M <- length(puzzle_input)
N <- nchar(puzzle_input[1])
# recreate matrix of letters
letter_mat <- matrix(rep(NA, M*N), nrow = M, ncol = N)
for(i in 1:M){
letter_mat[i,] <- str_split(puzzle_input[i], "")[[1]]
}
# make numerical version of topography
letters_to_numbers <- match(letter_mat, letters)
topo_mat <- matrix(letters_to_numbers, nrow = M, ncol = N)
topo_mat[letter_mat == "S"] <- 1
topo_mat[letter_mat == "E"] <- 26
# create a space for puzzle solving
S_x <- which(letter_mat == "S", arr.ind = TRUE)[1]
S_y <- which(letter_mat == "S", arr.ind = TRUE)[2]
E_x <- which(letter_mat == "E", arr.ind = TRUE)[1]
E_y <- which(letter_mat == "E", arr.ind = TRUE)[2]
puzzle_mat <- matrix(rep(-1, M*N), nrow = M, ncol = N)
puzzle_mat[S_x, S_y] <- 0 # starting location
#| message: false
#| warning: false
library("tidyverse")
# load puzzle input
# puzzle_input <- readLines("../inputs/20221212input.txt")
puzzle_input <- readLines("../inputs/20221212example.txt")
# get dimensions
M <- length(puzzle_input)
N <- nchar(puzzle_input[1])
# recreate matrix of letters
letter_mat <- matrix(rep(NA, M*N), nrow = M, ncol = N)
for(i in 1:M){
letter_mat[i,] <- str_split(puzzle_input[i], "")[[1]]
}
# make numerical version of topography
letters_to_numbers <- match(letter_mat, letters)
topo_mat <- matrix(letters_to_numbers, nrow = M, ncol = N)
topo_mat[letter_mat == "S"] <- 1
topo_mat[letter_mat == "E"] <- 26
# create a space for puzzle solving
S_x <- which(letter_mat == "S", arr.ind = TRUE)[1]
S_y <- which(letter_mat == "S", arr.ind = TRUE)[2]
E_x <- which(letter_mat == "E", arr.ind = TRUE)[1]
E_y <- which(letter_mat == "E", arr.ind = TRUE)[2]
puzzle_mat <- matrix(rep(-1, M*N), nrow = M, ncol = N)
puzzle_mat[S_x, S_y] <- 0 # starting location
# https://stackoverflow.com/questions/58123551/how-to-transform-a-data-matrix-to-a-data-frame-with-respect-to-coordinates
# xy_coords <- expand.grid(x = 1:N, y = 1:M)
# df <- transform(xy_coords, z = puzzle_mat[as.matrix(xy_coords)])
make_visual <- function(puzzle_mat, k = 1){
df <- as.data.frame(puzzle_mat)
names(df) <- as.character(1:N)
df$y <- 1:M
df <- df |>
pivot_longer(cols = !starts_with("y"), names_to = "x", values_to = "steps")
df |>
ggplot(aes(x = x, y = y)) +
geom_tile(aes(fill = steps)) +
geom_label(aes(x = x, y = y, label = steps)) +
coord_equal() +
labs(title = "Advent of Code, Day 12: Climbing Algorithm",
subtitle = paste("Iteration:", k),
caption = "Derek Sollberger") +
scale_fill_gradient(low = "green", high = "red") +
scale_y_reverse() +
theme_void()
}
# run maze solver
for(k in 1:(M*N)){
for(i in 1:M){
for(j in 1:N){
# if space has already been explored, proceed to search neighbors
if(puzzle_mat[i,j] >= 0){
# look north
if(i != 1 && puzzle_mat[i-1,j] < 0){
if(topo_mat[i-1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i-1,j] <- puzzle_mat[i,j] + 1
}
}
# look east
if(j != N && puzzle_mat[i,j+1] < 0){
if(topo_mat[i,j+1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j+1] <- puzzle_mat[i,j] + 1
}
}
# look south
if(i != M && puzzle_mat[i+1,j] < 0){
if(topo_mat[i+1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i+1,j] <- puzzle_mat[i,j] + 1
}
}
# look west
if(j != 1 && puzzle_mat[i,j-1] < 0){
if(topo_mat[i,j-1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j-1] <- puzzle_mat[i,j] + 1
}
}
}
}
}
if(puzzle_mat[E_x, E_y] > 0){
break
}
}
print("the fewest steps required to move from your current position")
print("to the location that should get the best signal is")
print(puzzle_mat[E_x, E_y])
min_step_count <- 9999
this_step_count <- 9999
for(row in 1:M){
for(col in 1:N){
# check to see if we are at "a" (or "S") elevation
if(topo_mat[row,col] == 1){
# see if "b" is a neighbor!!
can_start_climb <- FALSE
if(row != 1 && topo_mat[row-1,col] == 2){can_start_climb <- TRUE}
if(row != M && topo_mat[row+1,col] == 2){can_start_climb <- TRUE}
if(col != 1 && topo_mat[row,col-1] == 2){can_start_climb <- TRUE}
if(col != N && topo_mat[row,col+1] == 2){can_start_climb <- TRUE}
if(can_start_climb){
# run maze solver
for(k in 1:(M*N)){
for(i in 1:M){
for(j in 1:N){
# if space has been explored, proceed to search neighbors
if(puzzle_mat[i,j] >= 0){
# look north
if(i != 1 && puzzle_mat[i-1,j] < 0){
if(topo_mat[i-1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i-1,j] <- puzzle_mat[i,j] + 1
}
}
# look east
if(j != N && puzzle_mat[i,j+1] < 0){
if(topo_mat[i,j+1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j+1] <- puzzle_mat[i,j] + 1
}
}
# look south
if(i != M && puzzle_mat[i+1,j] < 0){
if(topo_mat[i+1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i+1,j] <- puzzle_mat[i,j] + 1
}
}
# look west
if(j != 1 && puzzle_mat[i,j-1] < 0){
if(topo_mat[i,j-1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j-1] <- puzzle_mat[i,j] + 1
}
}
}
}
}
if(puzzle_mat[E_x, E_y] > 0){
break
}
}
this_step_count <- puzzle_mat[E_x, E_y]
if(this_step_count < min_step_count){
min_step_count <- this_step_count
}
}
}
}
}
print("The fewest steps required to move starting from any square")
print("with elevation a to the location that should get ")
print("the best signal is")
print(min_step_count)
min_step_count <- 9999
this_step_count <- 9999
for(row in 5){
for(col in 1){
# check to see if we are at "a" (or "S") elevation
if(topo_mat[row,col] == 1){
# see if "b" is a neighbor!!
can_start_climb <- FALSE
if(row != 1 && topo_mat[row-1,col] == 2){can_start_climb <- TRUE}
if(row != M && topo_mat[row+1,col] == 2){can_start_climb <- TRUE}
if(col != 1 && topo_mat[row,col-1] == 2){can_start_climb <- TRUE}
if(col != N && topo_mat[row,col+1] == 2){can_start_climb <- TRUE}
if(can_start_climb){
# run maze solver
for(k in 1:(M*N)){
for(i in 1:M){
for(j in 1:N){
# if space has been explored, proceed to search neighbors
if(puzzle_mat[i,j] >= 0){
# look north
if(i != 1 && puzzle_mat[i-1,j] < 0){
if(topo_mat[i-1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i-1,j] <- puzzle_mat[i,j] + 1
}
}
# look east
if(j != N && puzzle_mat[i,j+1] < 0){
if(topo_mat[i,j+1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j+1] <- puzzle_mat[i,j] + 1
}
}
# look south
if(i != M && puzzle_mat[i+1,j] < 0){
if(topo_mat[i+1,j] <= (topo_mat[i,j] + 1)){
puzzle_mat[i+1,j] <- puzzle_mat[i,j] + 1
}
}
# look west
if(j != 1 && puzzle_mat[i,j-1] < 0){
if(topo_mat[i,j-1] <= (topo_mat[i,j] + 1)){
puzzle_mat[i,j-1] <- puzzle_mat[i,j] + 1
}
}
}
}
}
if(puzzle_mat[E_x, E_y] > 0){
break
}
}
this_step_count <- puzzle_mat[E_x, E_y]
if(this_step_count < min_step_count){
min_step_count <- this_step_count
}
}
}
}
}
print("The fewest steps required to move starting from any square")
print("with elevation a to the location that should get ")
print("the best signal is")
print(min_step_count)
