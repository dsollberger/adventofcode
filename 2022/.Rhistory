for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
overlap_check <- FALSE
# if(b <= d & a <= c){
#   overlap_check <- TRUE
# }
# if(a <= c & b <= d){
#   overlap_check <- TRUE
# }
if(b <= d){
overlap_check <- TRUE
}
if(a <= c){
overlap_check <- TRUE
}
df$contains_bool[row] <- overlap_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
overlap_check <- FALSE
if(b <= d & a <= c){
overlap_check <- TRUE
}
if(a <= c & b <= d){
overlap_check <- TRUE
}
# if(b <= d){
#   overlap_check <- TRUE
# }
# if(a <= c){
#   overlap_check <- TRUE
# }
df$contains_bool[row] <- overlap_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_example <- matrix(rep(".", M*N),
nrow = M, ncol = N)
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221204input.txt")
puzzle_input <- readLines("20221204example.txt")
mat_example
mat_example[1:2,1] <- str_split("NZ", "")[[1]]
mat_example
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_example <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_example[1:2,1] <- str_split("NZ", "")[[1]]
mat_example[1:3,1] <- str_split("DCM", "")[[1]]
mat_example[1:1,1] <- str_split("P", "")[[1]]
mat_example
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_example <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_example[1:2,1] <- str_split("NZ", "")[[1]]
mat_example[1:3,2] <- str_split("DCM", "")[[1]]
mat_example[1:1,3] <- str_split("P", "")[[1]]
mat_example
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_example <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp[1:1,1] <- mat_exp[1:1,2]
mat_exp
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp[1:1,1] <- mat_exp[1:1,2]
mat_exp[2:6,2] <- mat_exp[1:5,2]
mat_exp
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp[1:1,1] <- mat_exp[1:1,2]
mat_exp[1:5,2] <- mat_exp[2:6,2]
mat_exp
mat_exp[,2]
rev(mat_exp[,2])
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221204input.txt")
puzzle_input <- readLines("20221204example.txt")
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp
mat_exp[1:1,3] <- str_split("P", "")[[1]]
mat_exp
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp
mat_exp[1:1,1] <- mat_exp[1:1,2]
mat_exp
mat_exp[1:5,2] <- mat_exp[2:6,2]
mat_exp
n_instructions <- length(puzzle_input)
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221205input.txt")
puzzle_input <- readLines("20221205example.txt")
n_instructions <- length(puzzle_input)
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
}
this_instruction
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
}
this_instruction
num_crates
from_stack
to_stack
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):(2*num_crates),to_stack] <-
mat_exp[1:(num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates,from_stack] <- mat_exp[(num_crates+1):M,from_stack]
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):(2*num_crates),to_stack] <-
mat_exp[1:(num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):(2*num_crates+1),to_stack] <-
mat_exp[1:(num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
mat_exp
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221205input.txt")
puzzle_input <- readLines("20221205example.txt")
n_instructions <- length(puzzle_input)
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
mat_exp
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_exp[1:num_crates,to_stack] <- rev(mat_exp[1:num_crates,from_stack])
# move rest of crates up in the from_stack
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
mat_exp
mat_exp[1,]
paste(mat_exp[1,])
paste0(mat_exp[1,])
?paste0
paste0(mat_exp[1,], collapse = "")
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_exp[1:num_crates,to_stack] <- rev(mat_exp[1:num_crates,from_stack])
# move rest of crates up in the from_stack
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_exp[1,], collapse = ""))
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_exp[1:3,2] <- str_split("BWD", "")[[1]]
mat_exp[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_exp[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_exp[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_exp[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_exp[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_exp[1:4,8] <- str_split("RFPH", "")[[1]]
mat_exp[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
mat_puz
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_puz <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_puz[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_puz[1:3,2] <- str_split("BWD", "")[[1]]
mat_puz[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_puz[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_puz[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_puz[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_puz[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_puz[1:4,8] <- str_split("RFPH", "")[[1]]
mat_puz[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
mat_puz
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_puz <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_puz[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_puz[1:3,2] <- str_split("BWD", "")[[1]]
mat_puz[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_puz[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_puz[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_puz[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_puz[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_puz[1:4,8] <- str_split("RFPH", "")[[1]]
mat_puz[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_puz[(num_crates+1):M,to_stack] <-
mat_puz[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_puz[1:num_crates,to_stack] <- rev(mat_puz[1:num_crates,from_stack])
# move rest of crates up in the from_stack
mat_puz[1:(M - num_crates),from_stack] <- mat_puz[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_puz[1,], collapse = ""))
puzzle_input <- readLines("20221205example.txt")
n_instructions <- length(puzzle_input)
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
# move rest of crates up in the from_stack
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_exp[1,], collapse = ""))
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_puz <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_puz[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_puz[1:3,2] <- str_split("BWD", "")[[1]]
mat_puz[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_puz[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_puz[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_puz[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_puz[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_puz[1:4,8] <- str_split("RFPH", "")[[1]]
mat_puz[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_puz[(num_crates+1):M,to_stack] <-
mat_puz[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_puz[1:num_crates,to_stack] <- mat_puz[1:num_crates,from_stack]
# move rest of crates up in the from_stack
mat_puz[1:(M - num_crates),from_stack] <- mat_puz[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_puz[1,], collapse = ""))
