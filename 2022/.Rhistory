nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp[1:1,1] <- mat_exp[1:1,2]
mat_exp[2:6,2] <- mat_exp[1:5,2]
mat_exp
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp[1:1,1] <- mat_exp[1:1,2]
mat_exp[1:5,2] <- mat_exp[2:6,2]
mat_exp
mat_exp[,2]
rev(mat_exp[,2])
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221204input.txt")
puzzle_input <- readLines("20221204example.txt")
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp
mat_exp[1:1,3] <- str_split("P", "")[[1]]
mat_exp
# move 1 from 2 to 1
mat_exp[2:3,1] <- mat_exp[1:2,1]
mat_exp
mat_exp[1:1,1] <- mat_exp[1:1,2]
mat_exp
mat_exp[1:5,2] <- mat_exp[2:6,2]
mat_exp
n_instructions <- length(puzzle_input)
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221205input.txt")
puzzle_input <- readLines("20221205example.txt")
n_instructions <- length(puzzle_input)
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
}
this_instruction
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
}
this_instruction
num_crates
from_stack
to_stack
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):(2*num_crates),to_stack] <-
mat_exp[1:(num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates,from_stack] <- mat_exp[(num_crates+1):M,from_stack]
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):(2*num_crates),to_stack] <-
mat_exp[1:(num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):(2*num_crates+1),to_stack] <-
mat_exp[1:(num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates+1),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
mat_exp
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221205input.txt")
puzzle_input <- readLines("20221205example.txt")
n_instructions <- length(puzzle_input)
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
mat_exp
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_exp[1:num_crates,to_stack] <- rev(mat_exp[1:num_crates,from_stack])
# move rest of crates up in the from_stack
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
mat_exp
mat_exp[1,]
paste(mat_exp[1,])
paste0(mat_exp[1,])
?paste0
paste0(mat_exp[1,], collapse = "")
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
# (hand-coded) move 1 from 2 to 1
# mat_exp[2:3,1] <- mat_exp[1:2,1]
# mat_exp[1:1,1] <- mat_exp[1:1,2]
# mat_exp[1:5,2] <- mat_exp[2:6,2]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_exp[1:num_crates,to_stack] <- rev(mat_exp[1:num_crates,from_stack])
# move rest of crates up in the from_stack
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_exp[1,], collapse = ""))
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_exp[1:3,2] <- str_split("BWD", "")[[1]]
mat_exp[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_exp[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_exp[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_exp[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_exp[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_exp[1:4,8] <- str_split("RFPH", "")[[1]]
mat_exp[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
mat_puz
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_puz <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_puz[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_puz[1:3,2] <- str_split("BWD", "")[[1]]
mat_puz[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_puz[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_puz[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_puz[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_puz[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_puz[1:4,8] <- str_split("RFPH", "")[[1]]
mat_puz[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
mat_puz
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_puz <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_puz[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_puz[1:3,2] <- str_split("BWD", "")[[1]]
mat_puz[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_puz[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_puz[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_puz[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_puz[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_puz[1:4,8] <- str_split("RFPH", "")[[1]]
mat_puz[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_puz[(num_crates+1):M,to_stack] <-
mat_puz[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_puz[1:num_crates,to_stack] <- rev(mat_puz[1:num_crates,from_stack])
# move rest of crates up in the from_stack
mat_puz[1:(M - num_crates),from_stack] <- mat_puz[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_puz[1,], collapse = ""))
puzzle_input <- readLines("20221205example.txt")
n_instructions <- length(puzzle_input)
M <- 6 #number of crates (max rows needed)
N <- 3 #number of stacks (i.e. columns needed)
mat_exp <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_exp[1:2,1] <- str_split("NZ", "")[[1]]
mat_exp[1:3,2] <- str_split("DCM", "")[[1]]
mat_exp[1:1,3] <- str_split("P", "")[[1]]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_exp[(num_crates+1):M,to_stack] <-
mat_exp[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_exp[1:num_crates,to_stack] <- mat_exp[1:num_crates,from_stack]
# move rest of crates up in the from_stack
mat_exp[1:(M - num_crates),from_stack] <- mat_exp[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_exp[1,], collapse = ""))
puzzle_input <- readLines("20221205input.txt")
n_instructions <- length(puzzle_input)
M <- 8*7 #number of crates (max rows needed)
N <- 9 #number of stacks (i.e. columns needed)
mat_puz <- matrix(rep(".", M*N),
nrow = M, ncol = N)
mat_puz[1:8,1] <- str_split("BVWTQNHD", "")[[1]]
mat_puz[1:3,2] <- str_split("BWD", "")[[1]]
mat_puz[1:6,3] <- str_split("CJWQST", "")[[1]]
mat_puz[1:7,4] <- str_split("PTZNRJF", "")[[1]]
mat_puz[1:7,5] <- str_split("TSMJVPG", "")[[1]]
mat_puz[1:5,6] <- str_split("NTFWB", "")[[1]]
mat_puz[1:8,7] <- str_split("NVHFQDLB", "")[[1]]
mat_puz[1:4,8] <- str_split("RFPH", "")[[1]]
mat_puz[1:8,9] <- str_split("HPNLBMSZ", "")[[1]]
for(step in 1:n_instructions){
this_instruction <- str_split(puzzle_input[step], " ")[[1]]
num_crates <- as.numeric(this_instruction[2])
from_stack <- as.numeric(this_instruction[4])
to_stack   <- as.numeric(this_instruction[6])
# allocate space in to_stack
mat_puz[(num_crates+1):M,to_stack] <-
mat_puz[1:(M - num_crates),to_stack]
# moves crate(s) as requested; rev() handles one-at-a-time movement
mat_puz[1:num_crates,to_stack] <- mat_puz[1:num_crates,from_stack]
# move rest of crates up in the from_stack
mat_puz[1:(M - num_crates),from_stack] <- mat_puz[(num_crates+1):M,from_stack]
}
print("The elves want crates")
# at the top of each stack
print(paste0(mat_puz[1,], collapse = ""))
#| message: false
#| warning: false
library("tidyverse")
puzzle_input <- "qfmfhmhjmjggwbbvdvwvlvrrtsrsccwsslvlffjrrtprprjjvmmclmmghhddpvddclctcqtccgbgdbgdgsdgghqhtqtvvptvppwrwprpvrrrhpphththvhhrnnhnlnslnlhnhnhgnhnpnqqsmsgsllprlprrlzzqzffmzztctbtnbtthlttqvqcqmcmpcpbbczzbqbgghcghchhvwvllfrfnnbssfzsszpsplpglpprnpnfnbnhbnbtbzzvbvpbbhjjlzzbtbvbppczppbwppqwwnwlwccglgvgrgmmdwmwrmrppnfnhhhhqthqthqqrhrshhhqbhqqjgjvjllzvzbzhbbpttjsszvzqqtzzmbmddpldpdcdnccrmcrmmpwprplrrqssvddmpdmmwfwwlrljrrdsssmhsspnpffjggqllnzlnlhnnmddfrfpfbbvssjsrrznngcghgchcmhmrrrtzztjzzhchssslsmlmvvpwpqpjqjdddmsdmmtgtmgtglttfbbgrrcprrqffmmjnjttcmczzgbzggthhsttpggrmmgwwnpnqnqvnqvqppmlpmlpmpjpljljmmtpptfppfrppfdpfdppddmdttgzgzzdbzdzhzhnnsqssvmvbbpjjzwwvnwvvzmvzmzpmpttvrvccqddpgdppgmmthmthtggsfsbbvfbvfvhfvhvvpwpddqrqgqhghnnfmfbbwrbrgbgbvgbbdttffrddqbqpqzzmttlhhsqhsqhsqhhlplttpnpsstpthhpfhpfplprrgfrgffjppghgppghgdggjmmcgmccjvvsrvsrrwgrgmrrngrgttvbtbltthrthrttmfffjpfpssncnrngrrltrltlggjgcgllrzzllhwwjwrwgrgsrgrhrphrhhqwqsqmqlmqlmqmqrmrnnwnhwnhwhzwzjwwgbghhsjspszsznzfztfzfpzzlczztctsstctqtfqfqcfqqjrjccttmqqfpfdfnfwnffqbfbblpbpfpcfcwfccblbwwmqwqrrgprpccngnhghpppwmpplcppfrfjjgmmbzbhbcbzzgdgsdsvvqllzlppnfnlnlslsljlppcscqqfjjjwzwppfgfjjsvvsggjbjljpjpzjzrzjrzzfnfpnfpnfpnfnsnggmpggdllpmmrhhdqqppttgqqcsqsjsbjsjrsrqrbqqmbmcbmcbmbfmfvfqqdbdppmrprnrggmjjhnhbhdhbbfcbbcjjdhhwjwmjmssjswscswcwzccbgbqqmqgmmsdsjsbsdbsddvttjpppcqpcqcgqqslqsssczszrzvvrtvvjppswwhnnwlwtwhhwwzfwwpfpddlvvnvnnvlnntjtqjqjzzjttvvbqbhqbhbbbwnwhnwnppdbpdpvddrqdqjjlvlqqdfdhdjhdjdcjcrcjjggfmfvvfllvfvgglzllmhmzmdddfwddqjjqjfqfcfrrstrssptsstllrflfwwgswslwlbwbwjjvhvfvhfhffhsslwsllbnbblccbwwjqwqqdllrdrnrnffcbbqqpnqqdmdndtntvvrjvvsvmvgvnnmjlwgnjcwljgwnrwpqlztwrpmpgqtwlhrcwsrrhqhjhznrtpqfdnzbfqrzwslptdbdcnqvcllpjsfdvmzqwvzbpnmfcfcjnbmhtwhttjgtnczwctpdthhwmzvzrrgsnmbflgmszgsbvghbzgcmcmszgsbfmlmpbdspqlftmqrcjtmvgcrzznlfwjcbmddplsqrfflqnqfsldwhnncczdmfrrrsbjjqsdzrsgbdbwjbslfcqglsqfddhdsrcdrgqfqthgmfjvnfdfgdncfzpvqcpscnpmfgvqbfwszwzgmqvmcrdrwplfshdgqrchmccpqfznbmfvlhdpctlqgjslrwhjfjlmqfblgjrdlnzdtwlpwhnrhrcrpfwqpmjlgrdbgpbljntmbqlblqqqpgrnjtmjqvjpzvsqdpgtchmmwbhtmgcjqdplrtptqcvdjjpqdzsrcjhcwvdcghlwrdhtdfctmqfcjcqhcvvbzgsvlggcrdgqbtznwwmnbgsfrjprqgcmlswftlwpqqqvshdprldrsghmhrqvmqmvglbvzpvtrjbhcvhqmvdtcvsllznqzjmhpnlbhmlzthbwwhhvdtcdfdcdzhnbsrnqqjvzzsvfjhbsdlsbdlqjnlpnhfcjtdppzmphghltztzcdvzwbftbvwhvgmrllqfzrpbltptdtjjqtfwjfmczzgdvclqbsbftgtlhnhrrvbpvdltstdnhqvpvtjhmghptvsfnlspslmfsftzdrwljrgblgmcbmlszmhnlfdtmsrnjqwrfmsnfgpcqgzmlwppffrmbvhnlstfpgzwwmwffrqpdfvrspbczbrclwljgzfhpsrwwpdndfgjwbjtftnjrqvmtmzvjmtlmjhhptmgjvfrlzncmhnmpfcwpjbcpftqfzvmtldqhjpwvzrdnvnwnscgzslvfgjjpcvjshctmmpjbgdwtdjtlmztsbmwrjtmltnlsmwmjnpcgpprnfwcqdldbbqbfmdnvprzqwvntgzdbrsgdpgdjbcblmqpdphmwgvbgwlpblflphvjgjsjfshbjdftcqmsdnrzbgngcvddddjvrndhdcscqqswrnvslfrlvvncqjhzlbhdqhtrlvdsvjsbglhfzfphmzfmzqdvjqdwhjgfdwmzsdmbjzstjddfmfqjhmbdgdbvvhbqgstrzpvhpthhbwljczzrmvgsmbqvzdrmhvvjlmphzjfbmfqvwhtnrlfnfmqnnjvnwjswzshwgljmfjhrwbwgtpdqnqgqdzbssbjfbsgwmfzpfjdrtrnmsdffhnbgnrdlbjzfjrvtjgjgcvvzgllljrcrshczvpfqgnwnjjnhbwgvzwrptrgrdgtczjfzzndsqhqpmtqsvmcncfszsjllzzsjjmwgplpjwlhnhgbhctrttgzqbbcflzqvqgmhgdtlvfpbtncbwsjgnzpmbspcqzzwfplfprqlnbctwwrzpjtpfrmnpvnjrjppqrzjrcmggfmhrstzhmsjllcgjhwrbhcrvdvgmvjqqgmczlmhstmthzphlvrrvqmhjzzfzbhphstflhfjdlwqvzlsszctrdchwjssdfjjfzszlqdtwwthfjdqprpfftgdrpdhhcsdcpjbhdrgzwbgjspmffcmgcjnpmwsqwsvpfwzddlcpvlgpvctrssghndhvdmmmgndcjvhdjwttqphsjpgfbsdczmplfpwpzzjlbhrjptmsshfttnmhzdzmjctbltqjmfnpndqgwjzwdwrgdjdmcbtvjqwjngrtbfrwcttpdvcqtwqndznbchjqcqttrhjpjgwdbwzvwgmdsdfmpdwctvntvnsdmfnznfrsdcllpgpnstrrfrwrfrwnhbclnqhltrcdwqwzzldgbbtzmcvnbzmwcmntqpbscqrpzcjnbgbrzpcrcmdmdfsfgdpmgvwccqjrltrgfvjdgbhjndnmtnjjhzvghscdhnhflwplrqdzrnlnsvrtrdnphgqwjwqcjvtfdfshqdwbsvgrqbdlncjmhdmrlsvdnrhztznczzllsvpqlvwgqjvgvvwgrjcvtjvhrsgbdgvlmmtjbwrnftzphnqslcpggztgsdbjsbdtzwprsbcljpbwjhcrffnvtplcdlgmbtcgbllbdmwhwcllbqstnqqvdbcjrglwbmcfqvlvtpqncbspbphflvvrrsprlhqspfmqrsdtdlftsfzrqwdfffbhccvpfdtlptqzllfsbbrfnhjgwhlfcwmmjgjndcwfhdzvvvrzmwllthwsdmbbsrfrzmqnlnqnjnfpgfvrhsbzhjftmvzrzpqpmlcbnwmbssmvssmmqpvwnsjppdhmnhpntlvqmjnbmtvjnmtbpbzrcfhjfhvztnwrmthbswwthjddjmsdnjmzhhpjdllgscdrgmhfpljfzsmszqsqqgrznddhfmstzdcqpgztgwwqpvrghtmqlgdddlqqwwwtnpldbqtf"
library("tidyverse")
puzzle_input <- "qfmfhmhjmjggwbbvdvwvlvrrtsrsccwsslvlffjrrtprprjjvmmclmmghhddpvddclctcqtccgbgdbgdgsdgghqhtqtvvptvppwrwprpvrrrhpphththvhhrnnhnlnslnlhnhnhgnhnpnqqsmsgsllprlprrlzzqzffmzztctbtnbtthlttqvqcqmcmpcpbbczzbqbgghcghchhvwvllfrfnnbssfzsszpsplpglpprnpnfnbnhbnbtbzzvbvpbbhjjlzzbtbvbppczppbwppqwwnwlwccglgvgrgmmdwmwrmrppnfnhhhhqthqthqqrhrshhhqbhqqjgjvjllzvzbzhbbpttjsszvzqqtzzmbmddpldpdcdnccrmcrmmpwprplrrqssvddmpdmmwfwwlrljrrdsssmhsspnpffjggqllnzlnlhnnmddfrfpfbbvssjsrrznngcghgchcmhmrrrtzztjzzhchssslsmlmvvpwpqpjqjdddmsdmmtgtmgtglttfbbgrrcprrqffmmjnjttcmczzgbzggthhsttpggrmmgwwnpnqnqvnqvqppmlpmlpmpjpljljmmtpptfppfrppfdpfdppddmdttgzgzzdbzdzhzhnnsqssvmvbbpjjzwwvnwvvzmvzmzpmpttvrvccqddpgdppgmmthmthtggsfsbbvfbvfvhfvhvvpwpddqrqgqhghnnfmfbbwrbrgbgbvgbbdttffrddqbqpqzzmttlhhsqhsqhsqhhlplttpnpsstpthhpfhpfplprrgfrgffjppghgppghgdggjmmcgmccjvvsrvsrrwgrgmrrngrgttvbtbltthrthrttmfffjpfpssncnrngrrltrltlggjgcgllrzzllhwwjwrwgrgsrgrhrphrhhqwqsqmqlmqlmqmqrmrnnwnhwnhwhzwzjwwgbghhsjspszsznzfztfzfpzzlczztctsstctqtfqfqcfqqjrjccttmqqfpfdfnfwnffqbfbblpbpfpcfcwfccblbwwmqwqrrgprpccngnhghpppwmpplcppfrfjjgmmbzbhbcbzzgdgsdsvvqllzlppnfnlnlslsljlppcscqqfjjjwzwppfgfjjsvvsggjbjljpjpzjzrzjrzzfnfpnfpnfpnfnsnggmpggdllpmmrhhdqqppttgqqcsqsjsbjsjrsrqrbqqmbmcbmcbmbfmfvfqqdbdppmrprnrggmjjhnhbhdhbbfcbbcjjdhhwjwmjmssjswscswcwzccbgbqqmqgmmsdsjsbsdbsddvttjpppcqpcqcgqqslqsssczszrzvvrtvvjppswwhnnwlwtwhhwwzfwwpfpddlvvnvnnvlnntjtqjqjzzjttvvbqbhqbhbbbwnwhnwnppdbpdpvddrqdqjjlvlqqdfdhdjhdjdcjcrcjjggfmfvvfllvfvgglzllmhmzmdddfwddqjjqjfqfcfrrstrssptsstllrflfwwgswslwlbwbwjjvhvfvhfhffhsslwsllbnbblccbwwjqwqqdllrdrnrnffcbbqqpnqqdmdndtntvvrjvvsvmvgvnnmjlwgnjcwljgwnrwpqlztwrpmpgqtwlhrcwsrrhqhjhznrtpqfdnzbfqrzwslptdbdcnqvcllpjsfdvmzqwvzbpnmfcfcjnbmhtwhttjgtnczwctpdthhwmzvzrrgsnmbflgmszgsbvghbzgcmcmszgsbfmlmpbdspqlftmqrcjtmvgcrzznlfwjcbmddplsqrfflqnqfsldwhnncczdmfrrrsbjjqsdzrsgbdbwjbslfcqglsqfddhdsrcdrgqfqthgmfjvnfdfgdncfzpvqcpscnpmfgvqbfwszwzgmqvmcrdrwplfshdgqrchmccpqfznbmfvlhdpctlqgjslrwhjfjlmqfblgjrdlnzdtwlpwhnrhrcrpfwqpmjlgrdbgpbljntmbqlblqqqpgrnjtmjqvjpzvsqdpgtchmmwbhtmgcjqdplrtptqcvdjjpqdzsrcjhcwvdcghlwrdhtdfctmqfcjcqhcvvbzgsvlggcrdgqbtznwwmnbgsfrjprqgcmlswftlwpqqqvshdprldrsghmhrqvmqmvglbvzpvtrjbhcvhqmvdtcvsllznqzjmhpnlbhmlzthbwwhhvdtcdfdcdzhnbsrnqqjvzzsvfjhbsdlsbdlqjnlpnhfcjtdppzmphghltztzcdvzwbftbvwhvgmrllqfzrpbltptdtjjqtfwjfmczzgdvclqbsbftgtlhnhrrvbpvdltstdnhqvpvtjhmghptvsfnlspslmfsftzdrwljrgblgmcbmlszmhnlfdtmsrnjqwrfmsnfgpcqgzmlwppffrmbvhnlstfpgzwwmwffrqpdfvrspbczbrclwljgzfhpsrwwpdndfgjwbjtftnjrqvmtmzvjmtlmjhhptmgjvfrlzncmhnmpfcwpjbcpftqfzvmtldqhjpwvzrdnvnwnscgzslvfgjjpcvjshctmmpjbgdwtdjtlmztsbmwrjtmltnlsmwmjnpcgpprnfwcqdldbbqbfmdnvprzqwvntgzdbrsgdpgdjbcblmqpdphmwgvbgwlpblflphvjgjsjfshbjdftcqmsdnrzbgngcvddddjvrndhdcscqqswrnvslfrlvvncqjhzlbhdqhtrlvdsvjsbglhfzfphmzfmzqdvjqdwhjgfdwmzsdmbjzstjddfmfqjhmbdgdbvvhbqgstrzpvhpthhbwljczzrmvgsmbqvzdrmhvvjlmphzjfbmfqvwhtnrlfnfmqnnjvnwjswzshwgljmfjhrwbwgtpdqnqgqdzbssbjfbsgwmfzpfjdrtrnmsdffhnbgnrdlbjzfjrvtjgjgcvvzgllljrcrshczvpfqgnwnjjnhbwgvzwrptrgrdgtczjfzzndsqhqpmtqsvmcncfszsjllzzsjjmwgplpjwlhnhgbhctrttgzqbbcflzqvqgmhgdtlvfpbtncbwsjgnzpmbspcqzzwfplfprqlnbctwwrzpjtpfrmnpvnjrjppqrzjrcmggfmhrstzhmsjllcgjhwrbhcrvdvgmvjqqgmczlmhstmthzphlvrrvqmhjzzfzbhphstflhfjdlwqvzlsszctrdchwjssdfjjfzszlqdtwwthfjdqprpfftgdrpdhhcsdcpjbhdrgzwbgjspmffcmgcjnpmwsqwsvpfwzddlcpvlgpvctrssghndhvdmmmgndcjvhdjwttqphsjpgfbsdczmplfpwpzzjlbhrjptmsshfttnmhzdzmjctbltqjmfnpndqgwjzwdwrgdjdmcbtvjqwjngrtbfrwcttpdvcqtwqndznbchjqcqttrhjpjgwdbwzvwgmdsdfmpdwctvntvnsdmfnznfrsdcllpgpnstrrfrwrfrwnhbclnqhltrcdwqwzzldgbbtzmcvnbzmwcmntqpbscqrpzcjnbgbrzpcrcmdmdfsfgdpmgvwccqjrltrgfvjdgbhjndnmtnjjhzvghscdhnhflwplrqdzrnlnsvrtrdnphgqwjwqcjvtfdfshqdwbsvgrqbdlncjmhdmrlsvdnrhztznczzllsvpqlvwgqjvgvvwgrjcvtjvhrsgbdgvlmmtjbwrnftzphnqslcpggztgsdbjsbdtzwprsbcljpbwjhcrffnvtplcdlgmbtcgbllbdmwhwcllbqstnqqvdbcjrglwbmcfqvlvtpqncbspbphflvvrrsprlhqspfmqrsdtdlftsfzrqwdfffbhccvpfdtlptqzllfsbbrfnhjgwhlfcwmmjgjndcwfhdzvvvrzmwllthwsdmbbsrfrzmqnlnqnjnfpgfvrhsbzhjftmvzrzpqpmlcbnwmbssmvssmmqpvwnsjppdhmnhpntlvqmjnbmtvjnmtbpbzrcfhjfhvztnwrmthbswwthjddjmsdnjmzhhpjdllgscdrgmhfpljfzsmszqsqqgrznddhfmstzdcqpgztgwwqpvrghtmqlgdddlqqwwwtnpldbqtf"
find_SOPM <- function(buffer_stream){
# INPUT: buffer stream (string of characters)
# OUTPUT: marker location (integer) where the previous 4 characters are distinct
stream_length <- nchar(buffer_stream)
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc-4, loc)
}
}
find_SOPM("mjqjpqmgbljsphdztnvjfqwrcgsmlb")
find_SOPM <- function(buffer_stream){
# INPUT: buffer stream (string of characters)
# OUTPUT: marker location (integer) where the previous 4 characters are distinct
stream_length <- nchar(buffer_stream)
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc-4, loc)
}
}
# find_SOPM("mjqjpqmgbljsphdztnvjfqwrcgsmlb")
find_SOPM("mjqjpqmgbljsphdztnvjfqwrcgsmlb")
buffer_stream <- "mjqjpqmgbljsphdztnvjfqwrcgsmlb"
stream_length <- nchar(buffer_stream)
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc-4, loc)
}
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc - 3, loc)
}
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc - 3, loc)
A <- str_split(this_window, "")[[1]]
}
A
B <- str_split(this_window, "")[[1]] |> unique()
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc - 3, loc)
A <- str_split(this_window, "")[[1]]
B <- str_split(this_window, "")[[1]] |> unique()
}
this_window <- "mjqj"
str_split(this_window, "")[[1]]
str_split(this_window, "")[[1]] |> unique()
find_SOPM <- function(buffer_stream){
# INPUT: buffer stream (string of characters)
# OUTPUT: marker location (integer) where the previous 4 characters are distinct
stream_length <- nchar(buffer_stream)
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc - 3, loc)
A <- str_split(this_window, "")[[1]]
B <- str_split(this_window, "")[[1]] |> unique()
if(length(A) == length(B)){
break
}
}
# return
loc
}
find_SOPM("mjqjpqmgbljsphdztnvjfqwrcgsmlb")
find_SOPM <- function(buffer_stream){
# INPUT: buffer stream (string of characters)
# OUTPUT: marker location (integer) where the previous 4 characters are distinct
stream_length <- nchar(buffer_stream)
for(loc in 4:stream_length){
# grab previous 4 characters
this_window <- str_sub(buffer_stream, loc - 3, loc)
A <- str_split(this_window, "")[[1]]
B <- str_split(this_window, "")[[1]] |> unique()
if(length(A) == length(B)){
break
}
}
# return
loc
}
find_SOPM("mjqjpqmgbljsphdztnvjfqwrcgsmlb") #should return 7
find_SOPM("bvwbjplbgvbhsrlpgdmjqwftvncz") #should return 5
find_SOPM("nppdvjthqldpwncqszvftbrmjlhg") #should return 6
find_SOPM("nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg") #should return 10
find_SOPM("zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw") #should return 11
puzzle_input <- "qfmfhmhjmjggwbbvdvwvlvrrtsrsccwsslvlffjrrtprprjjvmmclmmghhddpvddclctcqtccgbgdbgdgsdgghqhtqtvvptvppwrwprpvrrrhpphththvhhrnnhnlnslnlhnhnhgnhnpnqqsmsgsllprlprrlzzqzffmzztctbtnbtthlttqvqcqmcmpcpbbczzbqbgghcghchhvwvllfrfnnbssfzsszpsplpglpprnpnfnbnhbnbtbzzvbvpbbhjjlzzbtbvbppczppbwppqwwnwlwccglgvgrgmmdwmwrmrppnfnhhhhqthqthqqrhrshhhqbhqqjgjvjllzvzbzhbbpttjsszvzqqtzzmbmddpldpdcdnccrmcrmmpwprplrrqssvddmpdmmwfwwlrljrrdsssmhsspnpffjggqllnzlnlhnnmddfrfpfbbvssjsrrznngcghgchcmhmrrrtzztjzzhchssslsmlmvvpwpqpjqjdddmsdmmtgtmgtglttfbbgrrcprrqffmmjnjttcmczzgbzggthhsttpggrmmgwwnpnqnqvnqvqppmlpmlpmpjpljljmmtpptfppfrppfdpfdppddmdttgzgzzdbzdzhzhnnsqssvmvbbpjjzwwvnwvvzmvzmzpmpttvrvccqddpgdppgmmthmthtggsfsbbvfbvfvhfvhvvpwpddqrqgqhghnnfmfbbwrbrgbgbvgbbdttffrddqbqpqzzmttlhhsqhsqhsqhhlplttpnpsstpthhpfhpfplprrgfrgffjppghgppghgdggjmmcgmccjvvsrvsrrwgrgmrrngrgttvbtbltthrthrttmfffjpfpssncnrngrrltrltlggjgcgllrzzllhwwjwrwgrgsrgrhrphrhhqwqsqmqlmqlmqmqrmrnnwnhwnhwhzwzjwwgbghhsjspszsznzfztfzfpzzlczztctsstctqtfqfqcfqqjrjccttmqqfpfdfnfwnffqbfbblpbpfpcfcwfccblbwwmqwqrrgprpccngnhghpppwmpplcppfrfjjgmmbzbhbcbzzgdgsdsvvqllzlppnfnlnlslsljlppcscqqfjjjwzwppfgfjjsvvsggjbjljpjpzjzrzjrzzfnfpnfpnfpnfnsnggmpggdllpmmrhhdqqppttgqqcsqsjsbjsjrsrqrbqqmbmcbmcbmbfmfvfqqdbdppmrprnrggmjjhnhbhdhbbfcbbcjjdhhwjwmjmssjswscswcwzccbgbqqmqgmmsdsjsbsdbsddvttjpppcqpcqcgqqslqsssczszrzvvrtvvjppswwhnnwlwtwhhwwzfwwpfpddlvvnvnnvlnntjtqjqjzzjttvvbqbhqbhbbbwnwhnwnppdbpdpvddrqdqjjlvlqqdfdhdjhdjdcjcrcjjggfmfvvfllvfvgglzllmhmzmdddfwddqjjqjfqfcfrrstrssptsstllrflfwwgswslwlbwbwjjvhvfvhfhffhsslwsllbnbblccbwwjqwqqdllrdrnrnffcbbqqpnqqdmdndtntvvrjvvsvmvgvnnmjlwgnjcwljgwnrwpqlztwrpmpgqtwlhrcwsrrhqhjhznrtpqfdnzbfqrzwslptdbdcnqvcllpjsfdvmzqwvzbpnmfcfcjnbmhtwhttjgtnczwctpdthhwmzvzrrgsnmbflgmszgsbvghbzgcmcmszgsbfmlmpbdspqlftmqrcjtmvgcrzznlfwjcbmddplsqrfflqnqfsldwhnncczdmfrrrsbjjqsdzrsgbdbwjbslfcqglsqfddhdsrcdrgqfqthgmfjvnfdfgdncfzpvqcpscnpmfgvqbfwszwzgmqvmcrdrwplfshdgqrchmccpqfznbmfvlhdpctlqgjslrwhjfjlmqfblgjrdlnzdtwlpwhnrhrcrpfwqpmjlgrdbgpbljntmbqlblqqqpgrnjtmjqvjpzvsqdpgtchmmwbhtmgcjqdplrtptqcvdjjpqdzsrcjhcwvdcghlwrdhtdfctmqfcjcqhcvvbzgsvlggcrdgqbtznwwmnbgsfrjprqgcmlswftlwpqqqvshdprldrsghmhrqvmqmvglbvzpvtrjbhcvhqmvdtcvsllznqzjmhpnlbhmlzthbwwhhvdtcdfdcdzhnbsrnqqjvzzsvfjhbsdlsbdlqjnlpnhfcjtdppzmphghltztzcdvzwbftbvwhvgmrllqfzrpbltptdtjjqtfwjfmczzgdvclqbsbftgtlhnhrrvbpvdltstdnhqvpvtjhmghptvsfnlspslmfsftzdrwljrgblgmcbmlszmhnlfdtmsrnjqwrfmsnfgpcqgzmlwppffrmbvhnlstfpgzwwmwffrqpdfvrspbczbrclwljgzfhpsrwwpdndfgjwbjtftnjrqvmtmzvjmtlmjhhptmgjvfrlzncmhnmpfcwpjbcpftqfzvmtldqhjpwvzrdnvnwnscgzslvfgjjpcvjshctmmpjbgdwtdjtlmztsbmwrjtmltnlsmwmjnpcgpprnfwcqdldbbqbfmdnvprzqwvntgzdbrsgdpgdjbcblmqpdphmwgvbgwlpblflphvjgjsjfshbjdftcqmsdnrzbgngcvddddjvrndhdcscqqswrnvslfrlvvncqjhzlbhdqhtrlvdsvjsbglhfzfphmzfmzqdvjqdwhjgfdwmzsdmbjzstjddfmfqjhmbdgdbvvhbqgstrzpvhpthhbwljczzrmvgsmbqvzdrmhvvjlmphzjfbmfqvwhtnrlfnfmqnnjvnwjswzshwgljmfjhrwbwgtpdqnqgqdzbssbjfbsgwmfzpfjdrtrnmsdffhnbgnrdlbjzfjrvtjgjgcvvzgllljrcrshczvpfqgnwnjjnhbwgvzwrptrgrdgtczjfzzndsqhqpmtqsvmcncfszsjllzzsjjmwgplpjwlhnhgbhctrttgzqbbcflzqvqgmhgdtlvfpbtncbwsjgnzpmbspcqzzwfplfprqlnbctwwrzpjtpfrmnpvnjrjppqrzjrcmggfmhrstzhmsjllcgjhwrbhcrvdvgmvjqqgmczlmhstmthzphlvrrvqmhjzzfzbhphstflhfjdlwqvzlsszctrdchwjssdfjjfzszlqdtwwthfjdqprpfftgdrpdhhcsdcpjbhdrgzwbgjspmffcmgcjnpmwsqwsvpfwzddlcpvlgpvctrssghndhvdmmmgndcjvhdjwttqphsjpgfbsdczmplfpwpzzjlbhrjptmsshfttnmhzdzmjctbltqjmfnpndqgwjzwdwrgdjdmcbtvjqwjngrtbfrwcttpdvcqtwqndznbchjqcqttrhjpjgwdbwzvwgmdsdfmpdwctvntvnsdmfnznfrsdcllpgpnstrrfrwrfrwnhbclnqhltrcdwqwzzldgbbtzmcvnbzmwcmntqpbscqrpzcjnbgbrzpcrcmdmdfsfgdpmgvwccqjrltrgfvjdgbhjndnmtnjjhzvghscdhnhflwplrqdzrnlnsvrtrdnphgqwjwqcjvtfdfshqdwbsvgrqbdlncjmhdmrlsvdnrhztznczzllsvpqlvwgqjvgvvwgrjcvtjvhrsgbdgvlmmtjbwrnftzphnqslcpggztgsdbjsbdtzwprsbcljpbwjhcrffnvtplcdlgmbtcgbllbdmwhwcllbqstnqqvdbcjrglwbmcfqvlvtpqncbspbphflvvrrsprlhqspfmqrsdtdlftsfzrqwdfffbhccvpfdtlptqzllfsbbrfnhjgwhlfcwmmjgjndcwfhdzvvvrzmwllthwsdmbbsrfrzmqnlnqnjnfpgfvrhsbzhjftmvzrzpqpmlcbnwmbssmvssmmqpvwnsjppdhmnhpntlvqmjnbmtvjnmtbpbzrcfhjfhvztnwrmthbswwthjddjmsdnjmzhhpjdllgscdrgmhfpljfzsmszqsqqgrznddhfmstzdcqpgztgwwqpvrghtmqlgdddlqqwwwtnpldbqtf"
#| message: false
#| warning: false
library("tidyverse")
puzzle_input <- "qfmfhmhjmjggwbbvdvwvlvrrtsrsccwsslvlffjrrtprprjjvmmclmmghhddpvddclctcqtccgbgdbgdgsdgghqhtqtvvptvppwrwprpvrrrhpphththvhhrnnhnlnslnlhnhnhgnhnpnqqsmsgsllprlprrlzzqzffmzztctbtnbtthlttqvqcqmcmpcpbbczzbqbgghcghchhvwvllfrfnnbssfzsszpsplpglpprnpnfnbnhbnbtbzzvbvpbbhjjlzzbtbvbppczppbwppqwwnwlwccglgvgrgmmdwmwrmrppnfnhhhhqthqthqqrhrshhhqbhqqjgjvjllzvzbzhbbpttjsszvzqqtzzmbmddpldpdcdnccrmcrmmpwprplrrqssvddmpdmmwfwwlrljrrdsssmhsspnpffjggqllnzlnlhnnmddfrfpfbbvssjsrrznngcghgchcmhmrrrtzztjzzhchssslsmlmvvpwpqpjqjdddmsdmmtgtmgtglttfbbgrrcprrqffmmjnjttcmczzgbzggthhsttpggrmmgwwnpnqnqvnqvqppmlpmlpmpjpljljmmtpptfppfrppfdpfdppddmdttgzgzzdbzdzhzhnnsqssvmvbbpjjzwwvnwvvzmvzmzpmpttvrvccqddpgdppgmmthmthtggsfsbbvfbvfvhfvhvvpwpddqrqgqhghnnfmfbbwrbrgbgbvgbbdttffrddqbqpqzzmttlhhsqhsqhsqhhlplttpnpsstpthhpfhpfplprrgfrgffjppghgppghgdggjmmcgmccjvvsrvsrrwgrgmrrngrgttvbtbltthrthrttmfffjpfpssncnrngrrltrltlggjgcgllrzzllhwwjwrwgrgsrgrhrphrhhqwqsqmqlmqlmqmqrmrnnwnhwnhwhzwzjwwgbghhsjspszsznzfztfzfpzzlczztctsstctqtfqfqcfqqjrjccttmqqfpfdfnfwnffqbfbblpbpfpcfcwfccblbwwmqwqrrgprpccngnhghpppwmpplcppfrfjjgmmbzbhbcbzzgdgsdsvvqllzlppnfnlnlslsljlppcscqqfjjjwzwppfgfjjsvvsggjbjljpjpzjzrzjrzzfnfpnfpnfpnfnsnggmpggdllpmmrhhdqqppttgqqcsqsjsbjsjrsrqrbqqmbmcbmcbmbfmfvfqqdbdppmrprnrggmjjhnhbhdhbbfcbbcjjdhhwjwmjmssjswscswcwzccbgbqqmqgmmsdsjsbsdbsddvttjpppcqpcqcgqqslqsssczszrzvvrtvvjppswwhnnwlwtwhhwwzfwwpfpddlvvnvnnvlnntjtqjqjzzjttvvbqbhqbhbbbwnwhnwnppdbpdpvddrqdqjjlvlqqdfdhdjhdjdcjcrcjjggfmfvvfllvfvgglzllmhmzmdddfwddqjjqjfqfcfrrstrssptsstllrflfwwgswslwlbwbwjjvhvfvhfhffhsslwsllbnbblccbwwjqwqqdllrdrnrnffcbbqqpnqqdmdndtntvvrjvvsvmvgvnnmjlwgnjcwljgwnrwpqlztwrpmpgqtwlhrcwsrrhqhjhznrtpqfdnzbfqrzwslptdbdcnqvcllpjsfdvmzqwvzbpnmfcfcjnbmhtwhttjgtnczwctpdthhwmzvzrrgsnmbflgmszgsbvghbzgcmcmszgsbfmlmpbdspqlftmqrcjtmvgcrzznlfwjcbmddplsqrfflqnqfsldwhnncczdmfrrrsbjjqsdzrsgbdbwjbslfcqglsqfddhdsrcdrgqfqthgmfjvnfdfgdncfzpvqcpscnpmfgvqbfwszwzgmqvmcrdrwplfshdgqrchmccpqfznbmfvlhdpctlqgjslrwhjfjlmqfblgjrdlnzdtwlpwhnrhrcrpfwqpmjlgrdbgpbljntmbqlblqqqpgrnjtmjqvjpzvsqdpgtchmmwbhtmgcjqdplrtptqcvdjjpqdzsrcjhcwvdcghlwrdhtdfctmqfcjcqhcvvbzgsvlggcrdgqbtznwwmnbgsfrjprqgcmlswftlwpqqqvshdprldrsghmhrqvmqmvglbvzpvtrjbhcvhqmvdtcvsllznqzjmhpnlbhmlzthbwwhhvdtcdfdcdzhnbsrnqqjvzzsvfjhbsdlsbdlqjnlpnhfcjtdppzmphghltztzcdvzwbftbvwhvgmrllqfzrpbltptdtjjqtfwjfmczzgdvclqbsbftgtlhnhrrvbpvdltstdnhqvpvtjhmghptvsfnlspslmfsftzdrwljrgblgmcbmlszmhnlfdtmsrnjqwrfmsnfgpcqgzmlwppffrmbvhnlstfpgzwwmwffrqpdfvrspbczbrclwljgzfhpsrwwpdndfgjwbjtftnjrqvmtmzvjmtlmjhhptmgjvfrlzncmhnmpfcwpjbcpftqfzvmtldqhjpwvzrdnvnwnscgzslvfgjjpcvjshctmmpjbgdwtdjtlmztsbmwrjtmltnlsmwmjnpcgpprnfwcqdldbbqbfmdnvprzqwvntgzdbrsgdpgdjbcblmqpdphmwgvbgwlpblflphvjgjsjfshbjdftcqmsdnrzbgngcvddddjvrndhdcscqqswrnvslfrlvvncqjhzlbhdqhtrlvdsvjsbglhfzfphmzfmzqdvjqdwhjgfdwmzsdmbjzstjddfmfqjhmbdgdbvvhbqgstrzpvhpthhbwljczzrmvgsmbqvzdrmhvvjlmphzjfbmfqvwhtnrlfnfmqnnjvnwjswzshwgljmfjhrwbwgtpdqnqgqdzbssbjfbsgwmfzpfjdrtrnmsdffhnbgnrdlbjzfjrvtjgjgcvvzgllljrcrshczvpfqgnwnjjnhbwgvzwrptrgrdgtczjfzzndsqhqpmtqsvmcncfszsjllzzsjjmwgplpjwlhnhgbhctrttgzqbbcflzqvqgmhgdtlvfpbtncbwsjgnzpmbspcqzzwfplfprqlnbctwwrzpjtpfrmnpvnjrjppqrzjrcmggfmhrstzhmsjllcgjhwrbhcrvdvgmvjqqgmczlmhstmthzphlvrrvqmhjzzfzbhphstflhfjdlwqvzlsszctrdchwjssdfjjfzszlqdtwwthfjdqprpfftgdrpdhhcsdcpjbhdrgzwbgjspmffcmgcjnpmwsqwsvpfwzddlcpvlgpvctrssghndhvdmmmgndcjvhdjwttqphsjpgfbsdczmplfpwpzzjlbhrjptmsshfttnmhzdzmjctbltqjmfnpndqgwjzwdwrgdjdmcbtvjqwjngrtbfrwcttpdvcqtwqndznbchjqcqttrhjpjgwdbwzvwgmdsdfmpdwctvntvnsdmfnznfrsdcllpgpnstrrfrwrfrwnhbclnqhltrcdwqwzzldgbbtzmcvnbzmwcmntqpbscqrpzcjnbgbrzpcrcmdmdfsfgdpmgvwccqjrltrgfvjdgbhjndnmtnjjhzvghscdhnhflwplrqdzrnlnsvrtrdnphgqwjwqcjvtfdfshqdwbsvgrqbdlncjmhdmrlsvdnrhztznczzllsvpqlvwgqjvgvvwgrjcvtjvhrsgbdgvlmmtjbwrnftzphnqslcpggztgsdbjsbdtzwprsbcljpbwjhcrffnvtplcdlgmbtcgbllbdmwhwcllbqstnqqvdbcjrglwbmcfqvlvtpqncbspbphflvvrrsprlhqspfmqrsdtdlftsfzrqwdfffbhccvpfdtlptqzllfsbbrfnhjgwhlfcwmmjgjndcwfhdzvvvrzmwllthwsdmbbsrfrzmqnlnqnjnfpgfvrhsbzhjftmvzrzpqpmlcbnwmbssmvssmmqpvwnsjppdhmnhpntlvqmjnbmtvjnmtbpbzrcfhjfhvztnwrmthbswwthjddjmsdnjmzhhpjdllgscdrgmhfpljfzsmszqsqqgrznddhfmstzdcqpgztgwwqpvrghtmqlgdddlqqwwwtnpldbqtf"
find_SOPM("qfmfhmhjmjggwbbvdvwvlvrrtsrsccwsslvlffjrrtprprjjvmmclmmghhddpvddclctcqtccgbgdbgdgsdgghqhtqtvvptvppwrwprpvrrrhpphththvhhrnnhnlnslnlhnhnhgnhnpnqqsmsgsllprlprrlzzqzffmzztctbtnbtthlttqvqcqmcmpcpbbczzbqbgghcghchhvwvllfrfnnbssfzsszpsplpglpprnpnfnbnhbnbtbzzvbvpbbhjjlzzbtbvbppczppbwppqwwnwlwccglgvgrgmmdwmwrmrppnfnhhhhqthqthqqrhrshhhqbhqqjgjvjllzvzbzhbbpttjsszvzqqtzzmbmddpldpdcdnccrmcrmmpwprplrrqssvddmpdmmwfwwlrljrrdsssmhsspnpffjggqllnzlnlhnnmddfrfpfbbvssjsrrznngcghgchcmhmrrrtzztjzzhchssslsmlmvvpwpqpjqjdddmsdmmtgtmgtglttfbbgrrcprrqffmmjnjttcmczzgbzggthhsttpggrmmgwwnpnqnqvnqvqppmlpmlpmpjpljljmmtpptfppfrppfdpfdppddmdttgzgzzdbzdzhzhnnsqssvmvbbpjjzwwvnwvvzmvzmzpmpttvrvccqddpgdppgmmthmthtggsfsbbvfbvfvhfvhvvpwpddqrqgqhghnnfmfbbwrbrgbgbvgbbdttffrddqbqpqzzmttlhhsqhsqhsqhhlplttpnpsstpthhpfhpfplprrgfrgffjppghgppghgdggjmmcgmccjvvsrvsrrwgrgmrrngrgttvbtbltthrthrttmfffjpfpssncnrngrrltrltlggjgcgllrzzllhwwjwrwgrgsrgrhrphrhhqwqsqmqlmqlmqmqrmrnnwnhwnhwhzwzjwwgbghhsjspszsznzfztfzfpzzlczztctsstctqtfqfqcfqqjrjccttmqqfpfdfnfwnffqbfbblpbpfpcfcwfccblbwwmqwqrrgprpccngnhghpppwmpplcppfrfjjgmmbzbhbcbzzgdgsdsvvqllzlppnfnlnlslsljlppcscqqfjjjwzwppfgfjjsvvsggjbjljpjpzjzrzjrzzfnfpnfpnfpnfnsnggmpggdllpmmrhhdqqppttgqqcsqsjsbjsjrsrqrbqqmbmcbmcbmbfmfvfqqdbdppmrprnrggmjjhnhbhdhbbfcbbcjjdhhwjwmjmssjswscswcwzccbgbqqmqgmmsdsjsbsdbsddvttjpppcqpcqcgqqslqsssczszrzvvrtvvjppswwhnnwlwtwhhwwzfwwpfpddlvvnvnnvlnntjtqjqjzzjttvvbqbhqbhbbbwnwhnwnppdbpdpvddrqdqjjlvlqqdfdhdjhdjdcjcrcjjggfmfvvfllvfvgglzllmhmzmdddfwddqjjqjfqfcfrrstrssptsstllrflfwwgswslwlbwbwjjvhvfvhfhffhsslwsllbnbblccbwwjqwqqdllrdrnrnffcbbqqpnqqdmdndtntvvrjvvsvmvgvnnmjlwgnjcwljgwnrwpqlztwrpmpgqtwlhrcwsrrhqhjhznrtpqfdnzbfqrzwslptdbdcnqvcllpjsfdvmzqwvzbpnmfcfcjnbmhtwhttjgtnczwctpdthhwmzvzrrgsnmbflgmszgsbvghbzgcmcmszgsbfmlmpbdspqlftmqrcjtmvgcrzznlfwjcbmddplsqrfflqnqfsldwhnncczdmfrrrsbjjqsdzrsgbdbwjbslfcqglsqfddhdsrcdrgqfqthgmfjvnfdfgdncfzpvqcpscnpmfgvqbfwszwzgmqvmcrdrwplfshdgqrchmccpqfznbmfvlhdpctlqgjslrwhjfjlmqfblgjrdlnzdtwlpwhnrhrcrpfwqpmjlgrdbgpbljntmbqlblqqqpgrnjtmjqvjpzvsqdpgtchmmwbhtmgcjqdplrtptqcvdjjpqdzsrcjhcwvdcghlwrdhtdfctmqfcjcqhcvvbzgsvlggcrdgqbtznwwmnbgsfrjprqgcmlswftlwpqqqvshdprldrsghmhrqvmqmvglbvzpvtrjbhcvhqmvdtcvsllznqzjmhpnlbhmlzthbwwhhvdtcdfdcdzhnbsrnqqjvzzsvfjhbsdlsbdlqjnlpnhfcjtdppzmphghltztzcdvzwbftbvwhvgmrllqfzrpbltptdtjjqtfwjfmczzgdvclqbsbftgtlhnhrrvbpvdltstdnhqvpvtjhmghptvsfnlspslmfsftzdrwljrgblgmcbmlszmhnlfdtmsrnjqwrfmsnfgpcqgzmlwppffrmbvhnlstfpgzwwmwffrqpdfvrspbczbrclwljgzfhpsrwwpdndfgjwbjtftnjrqvmtmzvjmtlmjhhptmgjvfrlzncmhnmpfcwpjbcpftqfzvmtldqhjpwvzrdnvnwnscgzslvfgjjpcvjshctmmpjbgdwtdjtlmztsbmwrjtmltnlsmwmjnpcgpprnfwcqdldbbqbfmdnvprzqwvntgzdbrsgdpgdjbcblmqpdphmwgvbgwlpblflphvjgjsjfshbjdftcqmsdnrzbgngcvddddjvrndhdcscqqswrnvslfrlvvncqjhzlbhdqhtrlvdsvjsbglhfzfphmzfmzqdvjqdwhjgfdwmzsdmbjzstjddfmfqjhmbdgdbvvhbqgstrzpvhpthhbwljczzrmvgsmbqvzdrmhvvjlmphzjfbmfqvwhtnrlfnfmqnnjvnwjswzshwgljmfjhrwbwgtpdqnqgqdzbssbjfbsgwmfzpfjdrtrnmsdffhnbgnrdlbjzfjrvtjgjgcvvzgllljrcrshczvpfqgnwnjjnhbwgvzwrptrgrdgtczjfzzndsqhqpmtqsvmcncfszsjllzzsjjmwgplpjwlhnhgbhctrttgzqbbcflzqvqgmhgdtlvfpbtncbwsjgnzpmbspcqzzwfplfprqlnbctwwrzpjtpfrmnpvnjrjppqrzjrcmggfmhrstzhmsjllcgjhwrbhcrvdvgmvjqqgmczlmhstmthzphlvrrvqmhjzzfzbhphstflhfjdlwqvzlsszctrdchwjssdfjjfzszlqdtwwthfjdqprpfftgdrpdhhcsdcpjbhdrgzwbgjspmffcmgcjnpmwsqwsvpfwzddlcpvlgpvctrssghndhvdmmmgndcjvhdjwttqphsjpgfbsdczmplfpwpzzjlbhrjptmsshfttnmhzdzmjctbltqjmfnpndqgwjzwdwrgdjdmcbtvjqwjngrtbfrwcttpdvcqtwqndznbchjqcqttrhjpjgwdbwzvwgmdsdfmpdwctvntvnsdmfnznfrsdcllpgpnstrrfrwrfrwnhbclnqhltrcdwqwzzldgbbtzmcvnbzmwcmntqpbscqrpzcjnbgbrzpcrcmdmdfsfgdpmgvwccqjrltrgfvjdgbhjndnmtnjjhzvghscdhnhflwplrqdzrnlnsvrtrdnphgqwjwqcjvtfdfshqdwbsvgrqbdlncjmhdmrlsvdnrhztznczzllsvpqlvwgqjvgvvwgrjcvtjvhrsgbdgvlmmtjbwrnftzphnqslcpggztgsdbjsbdtzwprsbcljpbwjhcrffnvtplcdlgmbtcgbllbdmwhwcllbqstnqqvdbcjrglwbmcfqvlvtpqncbspbphflvvrrsprlhqspfmqrsdtdlftsfzrqwdfffbhccvpfdtlptqzllfsbbrfnhjgwhlfcwmmjgjndcwfhdzvvvrzmwllthwsdmbbsrfrzmqnlnqnjnfpgfvrhsbzhjftmvzrzpqpmlcbnwmbssmvssmmqpvwnsjppdhmnhpntlvqmjnbmtvjnmtbpbzrcfhjfhvztnwrmthbswwthjddjmsdnjmzhhpjdllgscdrgmhfpljfzsmszqsqqgrznddhfmstzdcqpgztgwwqpvrghtmqlgdddlqqwwwtnpldbqtf")
puzzle_input <- readLines("20221206input.txt")
#| message: false
#| warning: false
library("tidyverse")
puzzle_input <- readLines("20221206input.txt")
# then run on puzzle input
find_SOPM(puzzle_input)
find_message <- function(buffer_stream){
# INPUT: buffer stream (string of characters)
# OUTPUT: message location (integer) where the previous 1 4 characters are distinct
stream_length <- nchar(buffer_stream)
for(loc in 14:stream_length){
# grab previous 14 characters
this_window <- str_sub(buffer_stream, loc - 13, loc)
A <- str_split(this_window, "")[[1]]
B <- str_split(this_window, "")[[1]] |> unique()
if(length(A) == length(B)){
break
}
}
# return
loc
}
# test examples
find_message("mjqjpqmgbljsphdztnvjfqwrcgsmlb") #should return 19
find_message("bvwbjplbgvbhsrlpgdmjqwftvncz") #should return 23
find_message("nppdvjthqldpwncqszvftbrmjlhg") #should return 23
find_message("nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg") #should return 29
find_message("zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw") #should return 26
# then run on puzzle input
find_message(puzzle_input)
