num_instructions <- length(puzzle_input)
L2_dist <- function(x1, y1, x2, y2){
# distance formula (or Pythagorean Theorem)
sqrt( (x2 - x1)^2 + (y2 - y1)^2 )
}
# starting locations
H_loc_x <- 1
H_loc_y <- 1
T_loc_x <- 1
T_loc_y <- 1
# keep track of where the tail of the rope was
tail_list <- list(paste(T_loc_x, T_loc_y))
tail_list
?segment
?append
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the head of the rope was
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between head and tail >= 2, then append to list
if(L2_dist(H_loc_x, H_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
tail_list <- append(tail_list,
paste(T_loc_x, T_loc_y))
} else {
#otherwise, only update tail location
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
#| message: false
#| warning: false
library("tidyverse")
puzzle_input <- readLines("20221209input.txt")
# puzzle_input <- readLines("20221209example.txt")
num_instructions <- length(puzzle_input)
# starting locations
H_loc_x <- 1
H_loc_y <- 1
T_loc_x <- 1
T_loc_y <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the head of the rope was
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between head and tail >= 2, then append to list
if(L2_dist(H_loc_x, H_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
tail_list <- append(tail_list,
paste(T_loc_x, T_loc_y))
} else {
#otherwise, only update tail location
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
#| message: false
#| warning: false
library("tidyverse")
# puzzle_input <- readLines("20221209input.txt")
puzzle_input <- readLines("20221209example.txt")
num_instructions <- length(puzzle_input)
# starting locations
H_loc_x <- 1
H_loc_y <- 1
T_loc_x <- 1
T_loc_y <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the head of the rope was
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between head and tail >= 2, then append to list
if(L2_dist(H_loc_x, H_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
tail_list <- append(tail_list,
paste(T_loc_x, T_loc_y))
} else {
#otherwise, only update tail location
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
tail_list
unique(tail_list)
# starting locations
H_loc_x <- 1
H_loc_y <- 1
T_loc_x <- 1
T_loc_y <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# starting locations
H_loc_x <- 1
H_loc_y <- 1
T_loc_x <- 1
T_loc_y <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the head of the rope was
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between head and tail >= 2, then append to list
if(L2_dist(H_loc_x, H_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
tail_list <- append(tail_list,
paste(T_loc_x, T_loc_y))
} else {
#otherwise, only update tail location
# T_loc_x <- H_old_loc_x
# T_loc_y <- H_old_loc_y
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
#| message: false
#| warning: false
library("tidyverse")
puzzle_input <- readLines("20221209input.txt")
# puzzle_input <- readLines("20221209example.txt")
num_instructions <- length(puzzle_input)
# starting locations
H_loc_x <- 1
H_loc_y <- 1
T_loc_x <- 1
T_loc_y <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the head of the rope was
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between head and tail >= 2, then append to list
if(L2_dist(H_loc_x, H_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- H_old_loc_x
T_loc_y <- H_old_loc_y
tail_list <- append(tail_list,
paste(T_loc_x, T_loc_y))
} else {
#otherwise, only update tail location
# T_loc_x <- H_old_loc_x
# T_loc_y <- H_old_loc_y
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
n <- length(tail_list)
new_tail_list <- tail_list[1:(n-9)]
n <- length(tail_list)
new_tail_list <- tail_list[1:(n-9)]
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
#| message: false
#| warning: false
library("tidyverse")
puzzle_input <- readLines("20221209input.txt")
# puzzle_input <- readLines("20221209example.txt")
num_instructions <- length(puzzle_input)
# starting locations of the head and knots of the rope
H_loc_x <- 1
H_loc_y <- 1
K2_loc_x <- 1
K2_loc_y <- 1
K3_loc_x <- 1
K3_loc_y <- 1
K4_loc_x <- 1
K4_loc_y <- 1
K5_loc_x <- 1
K5_loc_y <- 1
K6_loc_x <- 1
K6_loc_y <- 1
K7_loc_x <- 1
K7_loc_y <- 1
K8_loc_x <- 1
K8_loc_y <- 1
T_loc_x  <- 1
T_loc_y  <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the knots of the rope were
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
K2_old_loc_x <- K2_loc_x
K2_old_loc_y <- K2_loc_y
K3_old_loc_x <- K3_loc_x
K3_old_loc_y <- K3_loc_y
K4_old_loc_x <- K4_loc_x
K4_old_loc_y <- K4_loc_y
K5_old_loc_x <- K5_loc_x
K5_old_loc_y <- K5_loc_y
K6_old_loc_x <- K6_loc_x
K6_old_loc_y <- K6_loc_y
K7_old_loc_x <- K7_loc_x
K7_old_loc_y <- K7_loc_y
K8_old_loc_x <- K8_loc_x
K8_old_loc_y <- K8_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between knots >= 2, ...
if(L2_dist(H_loc_x, H_loc_y, K2_loc_x, K2_loc_y) >= 2){
K2_loc_x <- H_old_loc_x
K2_loc_y <- H_old_loc_y
}
if(L2_dist(K2_loc_x, K2_loc_y, K3_loc_x, K3_loc_y) >= 2){
K3_loc_x <- K2_old_loc_x
K3_loc_y <- K2_old_loc_y
}
if(L2_dist(K3_loc_x, K3_loc_y, K4_loc_x, K4_loc_y) >= 2){
K4_loc_x <- K3_old_loc_x
K4_loc_y <- K3_old_loc_y
}
if(L2_dist(K4_loc_x, K4_loc_y, K5_loc_x, K5_loc_y) >= 2){
K5_loc_x <- K4_old_loc_x
K5_loc_y <- K4_old_loc_y
}
if(L2_dist(K5_loc_x, K5_loc_y, K6_loc_x, K6_loc_y) >= 2){
K6_loc_x <- K5_old_loc_x
K6_loc_y <- K5_old_loc_y
}
if(L2_dist(K6_loc_x, K6_loc_y, K7_loc_x, K7_loc_y) >= 2){
K7_loc_x <- K6_old_loc_x
K7_loc_y <- K6_old_loc_y
}
if(L2_dist(K7_loc_x, K7_loc_y, K8_loc_x, K8_loc_y) >= 2){
K8_loc_x <- K7_old_loc_x
K8_loc_y <- K7_old_loc_y
}
if(L2_dist(K8_loc_x, K8_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- K8_old_loc_x
T_loc_y <- K8_old_loc_y
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
# starting locations of the head and knots of the rope
H_loc_x <- 1
H_loc_y <- 1
K2_loc_x <- 1
K2_loc_y <- 1
K3_loc_x <- 1
K3_loc_y <- 1
K4_loc_x <- 1
K4_loc_y <- 1
K5_loc_x <- 1
K5_loc_y <- 1
K6_loc_x <- 1
K6_loc_y <- 1
K7_loc_x <- 1
K7_loc_y <- 1
K8_loc_x <- 1
K8_loc_y <- 1
T_loc_x  <- 1
T_loc_y  <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the knots of the rope were
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
K2_old_loc_x <- K2_loc_x
K2_old_loc_y <- K2_loc_y
K3_old_loc_x <- K3_loc_x
K3_old_loc_y <- K3_loc_y
K4_old_loc_x <- K4_loc_x
K4_old_loc_y <- K4_loc_y
K5_old_loc_x <- K5_loc_x
K5_old_loc_y <- K5_loc_y
K6_old_loc_x <- K6_loc_x
K6_old_loc_y <- K6_loc_y
K7_old_loc_x <- K7_loc_x
K7_old_loc_y <- K7_loc_y
K8_old_loc_x <- K8_loc_x
K8_old_loc_y <- K8_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between knots >= 2, ...
if(L2_dist(H_loc_x, H_loc_y, K2_loc_x, K2_loc_y) >= 2){
K2_loc_x <- H_old_loc_x
K2_loc_y <- H_old_loc_y
}
if(L2_dist(K2_loc_x, K2_loc_y, K3_loc_x, K3_loc_y) >= 2){
K3_loc_x <- K2_old_loc_x
K3_loc_y <- K2_old_loc_y
}
if(L2_dist(K3_loc_x, K3_loc_y, K4_loc_x, K4_loc_y) >= 2){
K4_loc_x <- K3_old_loc_x
K4_loc_y <- K3_old_loc_y
}
if(L2_dist(K4_loc_x, K4_loc_y, K5_loc_x, K5_loc_y) >= 2){
K5_loc_x <- K4_old_loc_x
K5_loc_y <- K4_old_loc_y
}
if(L2_dist(K5_loc_x, K5_loc_y, K6_loc_x, K6_loc_y) >= 2){
K6_loc_x <- K5_old_loc_x
K6_loc_y <- K5_old_loc_y
}
if(L2_dist(K6_loc_x, K6_loc_y, K7_loc_x, K7_loc_y) >= 2){
K7_loc_x <- K6_old_loc_x
K7_loc_y <- K6_old_loc_y
}
if(L2_dist(K7_loc_x, K7_loc_y, K8_loc_x, K8_loc_y) >= 2){
K8_loc_x <- K7_old_loc_x
K8_loc_y <- K7_old_loc_y
}
if(L2_dist(K8_loc_x, K8_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- K8_old_loc_x
T_loc_y <- K8_old_loc_y
tail_list <- append(tail_list,
paste(T_loc_x, T_loc_y))
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
#| message: false
#| warning: false
# puzzle_input <- readLines("20221209input.txt")
puzzle_input <- readLines("20221209example2.txt")
num_instructions <- length(puzzle_input)
# starting locations of the head and knots of the rope
H_loc_x <- 1
H_loc_y <- 1
K2_loc_x <- 1
K2_loc_y <- 1
K3_loc_x <- 1
K3_loc_y <- 1
K4_loc_x <- 1
K4_loc_y <- 1
K5_loc_x <- 1
K5_loc_y <- 1
K6_loc_x <- 1
K6_loc_y <- 1
K7_loc_x <- 1
K7_loc_y <- 1
K8_loc_x <- 1
K8_loc_y <- 1
T_loc_x  <- 1
T_loc_y  <- 1
# keep track of where the tail of the rope was
# Plan: simply length(unique(tail_list)) for the solution
tail_list <- list(paste(T_loc_x, T_loc_y))
# simulate the rope movement
for(segment in 1:num_instructions){
this_instruction <- str_split(puzzle_input[segment], " ")[[1]]
current_dir <- this_instruction[1]
num_steps   <- this_instruction[2]
for(step in 1:num_steps){
#retain info about where the knots of the rope were
H_old_loc_x <- H_loc_x
H_old_loc_y <- H_loc_y
K2_old_loc_x <- K2_loc_x
K2_old_loc_y <- K2_loc_y
K3_old_loc_x <- K3_loc_x
K3_old_loc_y <- K3_loc_y
K4_old_loc_x <- K4_loc_x
K4_old_loc_y <- K4_loc_y
K5_old_loc_x <- K5_loc_x
K5_old_loc_y <- K5_loc_y
K6_old_loc_x <- K6_loc_x
K6_old_loc_y <- K6_loc_y
K7_old_loc_x <- K7_loc_x
K7_old_loc_y <- K7_loc_y
K8_old_loc_x <- K8_loc_x
K8_old_loc_y <- K8_loc_y
# update location of the head of the rope
if(current_dir == "U"){ H_loc_y <- H_loc_y + 1 }
if(current_dir == "L"){ H_loc_x <- H_loc_x - 1 }
if(current_dir == "R"){ H_loc_x <- H_loc_x + 1 }
if(current_dir == "D"){ H_loc_y <- H_loc_y - 1 }
# if distance between knots >= 2, ...
if(L2_dist(H_loc_x, H_loc_y, K2_loc_x, K2_loc_y) >= 2){
K2_loc_x <- H_old_loc_x
K2_loc_y <- H_old_loc_y
}
if(L2_dist(K2_loc_x, K2_loc_y, K3_loc_x, K3_loc_y) >= 2){
K3_loc_x <- K2_old_loc_x
K3_loc_y <- K2_old_loc_y
}
if(L2_dist(K3_loc_x, K3_loc_y, K4_loc_x, K4_loc_y) >= 2){
K4_loc_x <- K3_old_loc_x
K4_loc_y <- K3_old_loc_y
}
if(L2_dist(K4_loc_x, K4_loc_y, K5_loc_x, K5_loc_y) >= 2){
K5_loc_x <- K4_old_loc_x
K5_loc_y <- K4_old_loc_y
}
if(L2_dist(K5_loc_x, K5_loc_y, K6_loc_x, K6_loc_y) >= 2){
K6_loc_x <- K5_old_loc_x
K6_loc_y <- K5_old_loc_y
}
if(L2_dist(K6_loc_x, K6_loc_y, K7_loc_x, K7_loc_y) >= 2){
K7_loc_x <- K6_old_loc_x
K7_loc_y <- K6_old_loc_y
}
if(L2_dist(K7_loc_x, K7_loc_y, K8_loc_x, K8_loc_y) >= 2){
K8_loc_x <- K7_old_loc_x
K8_loc_y <- K7_old_loc_y
}
if(L2_dist(K8_loc_x, K8_loc_y, T_loc_x, T_loc_y) >= 2){
T_loc_x <- K8_old_loc_x
T_loc_y <- K8_old_loc_y
tail_list <- append(tail_list,
paste(T_loc_x, T_loc_y))
}
}
}
print("The tail of the rope visited")
print(length(unique(tail_list)))
print("locations.")
unique(tail_list)
