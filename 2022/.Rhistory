# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 15:15){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- first_elf_tasks[1]
d <- first_elf_tasks[2]
b <- second_elf_tasks[1]
c <- second_elf_tasks[2]
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
redundacy_check <- FALSE
if(a <= b){
if(b <= c){
if(c <= d){
redundacy_check <- TRUE
}
}
}
if(b <= a){
if(a <= d){
if(d <= c){
redundacy_check <- TRUE
}
}
}
df$contains_bool[row] <- redundacy_check
}
print("Assignment pairs where one range fully contains the other:")
print(sum(df$contains_bool))
this_pair_of_elves
first_elf
second_elf
first_elf_tasks
second_elf_tasks
a
b
c
d
df[15,]
a <= b
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 15:15){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
redundacy_check <- FALSE
if(a <= b){
if(b <= c){
if(c <= d){
redundacy_check <- TRUE
}
}
}
if(b <= a){
if(a <= d){
if(d <= c){
redundacy_check <- TRUE
}
}
}
df$contains_bool[row] <- redundacy_check
}
print("Assignment pairs where one range fully contains the other:")
print(sum(df$contains_bool))
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
redundacy_check <- FALSE
if(a <= b){
if(b <= c){
if(c <= d){
redundacy_check <- TRUE
}
}
}
if(b <= a){
if(a <= d){
if(d <= c){
redundacy_check <- TRUE
}
}
}
df$contains_bool[row] <- redundacy_check
}
print("Assignment pairs where one range fully contains the other:")
print(sum(df$contains_bool))
#| message: false
#| warning: false
# loading the data
# puzzle_input <- readLines("20221204input.txt")
puzzle_input <- readLines("20221204example.txt")
N <- length(puzzle_input) #number of rows (i.e. elf pairs)
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
redundacy_check <- FALSE
if(b <= d & a <= c){
redundacy_check <- TRUE
}
if(c <= a & b <= d){
redundacy_check <- TRUE
}
df$contains_bool[row] <- redundacy_check
}
print("Assignment pairs where one range fully contains the other:")
print(sum(df$contains_bool))
#| message: false
#| warning: false
# loading the data
puzzle_input <- readLines("20221204input.txt")
# puzzle_input <- readLines("20221204example.txt")
N <- length(puzzle_input) #number of rows (i.e. elf pairs)
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
redundacy_check <- FALSE
if(b <= d & a <= c){
redundacy_check <- TRUE
}
if(c <= a & b <= d){
redundacy_check <- TRUE
}
df$contains_bool[row] <- redundacy_check
}
print("Assignment pairs where one range fully contains the other:")
print(sum(df$contains_bool))
#| message: false
#| warning: false
# loading the data
puzzle_input <- readLines("20221204input.txt")
# puzzle_input <- readLines("20221204example.txt")
N <- length(puzzle_input) #number of rows (i.e. elf pairs)
#| message: false
#| warning: false
# loading the data
# puzzle_input <- readLines("20221204input.txt")
puzzle_input <- readLines("20221204example.txt")
N <- length(puzzle_input) #number of rows (i.e. elf pairs)
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
redundacy_check <- FALSE
if(b <= d & a <= c){
redundacy_check <- TRUE
}
if(c <= a & b <= d){
redundacy_check <- TRUE
}
df$contains_bool[row] <- redundacy_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
#| message: false
#| warning: false
# loading the data
puzzle_input <- readLines("20221204input.txt")
# puzzle_input <- readLines("20221204example.txt")
N <- length(puzzle_input) #number of rows (i.e. elf pairs)
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
redundacy_check <- FALSE
if(b <= d & a <= c){
redundacy_check <- TRUE
}
if(c <= a & b <= d){
redundacy_check <- TRUE
}
df$contains_bool[row] <- redundacy_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
#| message: false
#| warning: false
# loading the data
# puzzle_input <- readLines("20221204input.txt")
puzzle_input <- readLines("20221204example.txt")
N <- length(puzzle_input) #number of rows (i.e. elf pairs)
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
overlap_check <- FALSE
# if(b <= d & a <= c){
#   overlap_check <- TRUE
# }
# if(c <= a & b <= d){
#   overlap_check <- TRUE
# }
if(b <= d){
overlap_check <- TRUE
}
if(c <= a){
overlap_check <- TRUE
}
df$contains_bool[row] <- overlap_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
#| message: false
#| warning: false
# loading the data
puzzle_input <- readLines("20221204input.txt")
# puzzle_input <- readLines("20221204example.txt")
N <- length(puzzle_input) #number of rows (i.e. elf pairs)
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
overlap_check <- FALSE
# if(b <= d & a <= c){
#   overlap_check <- TRUE
# }
# if(c <= a & b <= d){
#   overlap_check <- TRUE
# }
if(b <= d){
overlap_check <- TRUE
}
if(c <= a){
overlap_check <- TRUE
}
df$contains_bool[row] <- overlap_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
overlap_check <- FALSE
# if(b <= d & a <= c){
#   overlap_check <- TRUE
# }
# if(c <= a & b <= d){
#   overlap_check <- TRUE
# }
if(b <= d | c <= a){
overlap_check <- TRUE
}
df$contains_bool[row] <- overlap_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
overlap_check <- FALSE
# if(b <= d & a <= c){
#   overlap_check <- TRUE
# }
# if(a <= c & b <= d){
#   overlap_check <- TRUE
# }
if(b <= d){
overlap_check <- TRUE
}
if(a <= c){
overlap_check <- TRUE
}
df$contains_bool[row] <- overlap_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
# initialize data frame
df <- data.frame(
A = rep(NA, N),
B = rep(NA, N),
C = rep(NA, N),
D = rep(NA, N),
contains_bool = rep(NA, N)
)
# load data into a data frame
for(row in 1:N){
this_pair_of_elves <- str_split(puzzle_input[row], ",")[[1]]
first_elf <- this_pair_of_elves[1]
second_elf <- this_pair_of_elves[2]
first_elf_tasks <- str_split(first_elf, "-")[[1]]
second_elf_tasks <- str_split(second_elf, "-")[[1]]
a <- as.numeric(first_elf_tasks[1])
d <- as.numeric(first_elf_tasks[2])
b <- as.numeric(second_elf_tasks[1])
c <- as.numeric(second_elf_tasks[2])
df$A[row] <- a
df$D[row] <- d
df$B[row] <- b
df$C[row] <- c
overlap_check <- FALSE
if(b <= d & a <= c){
overlap_check <- TRUE
}
if(a <= c & b <= d){
overlap_check <- TRUE
}
# if(b <= d){
#   overlap_check <- TRUE
# }
# if(a <= c){
#   overlap_check <- TRUE
# }
df$contains_bool[row] <- overlap_check
}
print("Assignment pairs where one range overlaps the other:")
print(sum(df$contains_bool))
